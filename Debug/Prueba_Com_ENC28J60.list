
Prueba_Com_ENC28J60.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  080030c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080030c8  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009520  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019df  00000000  00000000  000295f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bf  00000000  00000000  0002b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f0d  00000000  00000000  0002bf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a011  00000000  00000000  00043e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085971  00000000  00000000  0004de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b78  00000000  00000000  000d3808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d6380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f84 	.word	0x08002f84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f84 	.word	0x08002f84

0800014c <ENC28J60_Init>:

SPI_HandleTypeDef *spi = NULL;
extern UART_HandleTypeDef huart1;

void ENC28J60_Init(SPI_HandleTypeDef *hspi)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	spi = hspi;
 8000154:	4a03      	ldr	r2, [pc, #12]	; (8000164 <ENC28J60_Init+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	20000084 	.word	0x20000084

08000168 <ENC28J60_ReadRegETH>:

uint8_t ENC28J60_ReadRegETH(uint8_t address)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b086      	sub	sp, #24
 800016c:	af02      	add	r7, sp, #8
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[2] = {0,0}, reg_value[2]={0,0};
 8000172:	2300      	movs	r3, #0
 8000174:	81bb      	strh	r3, [r7, #12]
 8000176:	2300      	movs	r3, #0
 8000178:	813b      	strh	r3, [r7, #8]

	cmd[0] = address & 0x1F;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 031f 	and.w	r3, r3, #31
 8000180:	b2db      	uxtb	r3, r3
 8000182:	733b      	strb	r3, [r7, #12]

	ENC28J60_CS_Low();
 8000184:	2200      	movs	r2, #0
 8000186:	2110      	movs	r1, #16
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <ENC28J60_ReadRegETH+0x54>)
 800018a:	f000 fdd1 	bl	8000d30 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(spi, cmd, reg_value, 2, 1000);
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <ENC28J60_ReadRegETH+0x58>)
 8000190:	6818      	ldr	r0, [r3, #0]
 8000192:	f107 0208 	add.w	r2, r7, #8
 8000196:	f107 010c 	add.w	r1, r7, #12
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	9300      	str	r3, [sp, #0]
 80001a0:	2302      	movs	r3, #2
 80001a2:	f001 fa71 	bl	8001688 <HAL_SPI_TransmitReceive>

	ENC28J60_CS_High();
 80001a6:	2201      	movs	r2, #1
 80001a8:	2110      	movs	r1, #16
 80001aa:	4804      	ldr	r0, [pc, #16]	; (80001bc <ENC28J60_ReadRegETH+0x54>)
 80001ac:	f000 fdc0 	bl	8000d30 <HAL_GPIO_WritePin>

	return reg_value[1];
 80001b0:	7a7b      	ldrb	r3, [r7, #9]

}
 80001b2:	4618      	mov	r0, r3
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800
 80001c0:	20000084 	.word	0x20000084

080001c4 <ENC28J60_RegDump>:

	return reg_value[2];
}

void ENC28J60_RegDump()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af02      	add	r7, sp, #8
	uint8_t reg;

	printf("\nREG DUMP START ...\n");
 80001ca:	4811      	ldr	r0, [pc, #68]	; (8000210 <ENC28J60_RegDump+0x4c>)
 80001cc:	f001 ffaa 	bl	8002124 <puts>

	for(uint8_t i = 0; i < 32; i++)
 80001d0:	2300      	movs	r3, #0
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	e011      	b.n	80001fa <ENC28J60_RegDump+0x36>
	{
		reg = ENC28J60_ReadRegETH(i);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffc5 	bl	8000168 <ENC28J60_ReadRegETH>
 80001de:	4603      	mov	r3, r0
 80001e0:	71bb      	strb	r3, [r7, #6]
		printf("REG%02d(0x%02X) = %03d(0x%02X)\n", i, i, reg, reg);
 80001e2:	79f9      	ldrb	r1, [r7, #7]
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	79b8      	ldrb	r0, [r7, #6]
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	4603      	mov	r3, r0
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <ENC28J60_RegDump+0x50>)
 80001f0:	f001 ff32 	bl	8002058 <iprintf>
	for(uint8_t i = 0; i < 32; i++)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	3301      	adds	r3, #1
 80001f8:	71fb      	strb	r3, [r7, #7]
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b1f      	cmp	r3, #31
 80001fe:	d9ea      	bls.n	80001d6 <ENC28J60_RegDump+0x12>
	}

	printf("REG DUMP FINISHED !\n");
 8000200:	4805      	ldr	r0, [pc, #20]	; (8000218 <ENC28J60_RegDump+0x54>)
 8000202:	f001 ff8f 	bl	8002124 <puts>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	08002fa0 	.word	0x08002fa0
 8000214:	08002fb4 	.word	0x08002fb4
 8000218:	08002fd4 	.word	0x08002fd4

0800021c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10000);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000230:	68b9      	ldr	r1, [r7, #8]
 8000232:	4804      	ldr	r0, [pc, #16]	; (8000244 <_write+0x28>)
 8000234:	f001 fcce 	bl	8001bd4 <HAL_UART_Transmit>
	return len;
 8000238:	687b      	ldr	r3, [r7, #4]
}
 800023a:	4618      	mov	r0, r3
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200000e0 	.word	0x200000e0

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 faa6 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f81c 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f8c0 	bl	80003d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000258:	f000 f85e 	bl	8000318 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800025c:	f000 f892 	bl	8000384 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ENC28J60_Init(&hspi1);
 8000260:	4807      	ldr	r0, [pc, #28]	; (8000280 <main+0x38>)
 8000262:	f7ff ff73 	bl	800014c <ENC28J60_Init>
  setbuf(stdout, NULL);
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x3c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 ff60 	bl	8002134 <setbuf>

  printf("ENC28J60 Regs\n\n");
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <main+0x40>)
 8000276:	f001 ff55 	bl	8002124 <puts>

  ENC28J60_RegDump();
 800027a:	f7ff ffa3 	bl	80001c4 <ENC28J60_RegDump>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027e:	e7fe      	b.n	800027e <main+0x36>
 8000280:	20000088 	.word	0x20000088
 8000284:	20000064 	.word	0x20000064
 8000288:	08002fe8 	.word	0x08002fe8

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f8d8 	bl	8002450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fd43 	bl	8000d60 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e0:	f000 f8b8 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	2302      	movs	r3, #2
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 ffb0 	bl	8001264 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030a:	f000 f8a3 	bl	8000454 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_SPI1_Init+0x64>)
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <MX_SPI1_Init+0x68>)
 8000320:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <MX_SPI1_Init+0x64>)
 8000324:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000328:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_SPI1_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_SPI1_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_SPI1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_SPI1_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_SPI1_Init+0x64>)
 8000344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000348:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_SPI1_Init+0x64>)
 800034c:	2210      	movs	r2, #16
 800034e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <MX_SPI1_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_SPI1_Init+0x64>)
 8000364:	220a      	movs	r2, #10
 8000366:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_SPI1_Init+0x64>)
 800036a:	f001 f909 	bl	8001580 <HAL_SPI_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000374:	f000 f86e 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000088 	.word	0x20000088
 8000380:	40013000 	.word	0x40013000

08000384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART1_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003bc:	f001 fbba 	bl	8001b34 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 f845 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000e0 	.word	0x200000e0
 80003d4:	40013800 	.word	0x40013800

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_GPIO_Init+0x74>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a16      	ldr	r2, [pc, #88]	; (800044c <MX_GPIO_Init+0x74>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_GPIO_Init+0x74>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_GPIO_Init+0x74>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <MX_GPIO_Init+0x74>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_GPIO_Init+0x74>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC28J60_CS_GPIO_Port, ENC28J60_CS_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2110      	movs	r1, #16
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <MX_GPIO_Init+0x78>)
 8000422:	f000 fc85 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENC28J60_CS_Pin */
  GPIO_InitStruct.Pin = ENC28J60_CS_Pin;
 8000426:	2310      	movs	r3, #16
 8000428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2302      	movs	r3, #2
 8000434:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC28J60_CS_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	4619      	mov	r1, r3
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_GPIO_Init+0x78>)
 800043e:	f000 faf3 	bl	8000a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <HAL_SPI_MspInit+0x88>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d12f      	bne.n	8000544 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_SPI_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <HAL_SPI_MspInit+0x90>)
 8000528:	f000 fa7e 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_SPI_MspInit+0x90>)
 8000540:	f000 fa72 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013000 	.word	0x40013000
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <HAL_UART_MspInit+0x8c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d131      	bne.n	80005dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_UART_MspInit+0x90>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <HAL_UART_MspInit+0x94>)
 80005be:	f000 fa33 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_UART_MspInit+0x94>)
 80005d8:	f000 fa26 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40013800 	.word	0x40013800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000636:	f000 f8f7 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}

0800063e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e00a      	b.n	8000666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000650:	f3af 8000 	nop.w
 8000654:	4601      	mov	r1, r0
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	b2ca      	uxtb	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbf0      	blt.n	8000650 <_read+0x12>
  }

  return len;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069e:	605a      	str	r2, [r3, #4]
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <_isatty>:

int _isatty(int file)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f001 fef0 	bl	80024ec <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	20000128 	.word	0x20000128
 8000740:	20000280 	.word	0x20000280

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff fff8 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f001 febd 	bl	80024f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fd63 	bl	8000248 <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800078c:	08003060 	.word	0x08003060
  ldr r2, =_sbss
 8000790:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000794:	2000027c 	.word	0x2000027c

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f907 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe52 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f911 	bl	8000a0e <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	f000 f8e7 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	2000012c 	.word	0x2000012c

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	2000012c 	.word	0x2000012c

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff49 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5e 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e169      	b.n	8000d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f040 8158 	bne.w	8000d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a9a      	ldr	r2, [pc, #616]	; (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d05e      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a64:	4a98      	ldr	r2, [pc, #608]	; (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d875      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a6a:	4a98      	ldr	r2, [pc, #608]	; (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d058      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a70:	4a96      	ldr	r2, [pc, #600]	; (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d86f      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a76:	4a96      	ldr	r2, [pc, #600]	; (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d052      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a7c:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d869      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a82:	4a94      	ldr	r2, [pc, #592]	; (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d04c      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a88:	4a92      	ldr	r2, [pc, #584]	; (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d863      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d046      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a94:	4a90      	ldr	r2, [pc, #576]	; (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d85d      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d82a      	bhi.n	8000af4 <HAL_GPIO_Init+0xcc>
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	d859      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <HAL_GPIO_Init+0x80>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000afd 	.word	0x08000afd
 8000ab0:	08000b0f 	.word	0x08000b0f
 8000ab4:	08000b51 	.word	0x08000b51
 8000ab8:	08000b57 	.word	0x08000b57
 8000abc:	08000b57 	.word	0x08000b57
 8000ac0:	08000b57 	.word	0x08000b57
 8000ac4:	08000b57 	.word	0x08000b57
 8000ac8:	08000b57 	.word	0x08000b57
 8000acc:	08000b57 	.word	0x08000b57
 8000ad0:	08000b57 	.word	0x08000b57
 8000ad4:	08000b57 	.word	0x08000b57
 8000ad8:	08000b57 	.word	0x08000b57
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b57 	.word	0x08000b57
 8000ae4:	08000b57 	.word	0x08000b57
 8000ae8:	08000b57 	.word	0x08000b57
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b19 	.word	0x08000b19
 8000af4:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <HAL_GPIO_Init+0x2b4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000afa:	e02c      	b.n	8000b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e029      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e024      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	3308      	adds	r3, #8
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e01f      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	330c      	adds	r3, #12
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e01a      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d102      	bne.n	8000b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e013      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	611a      	str	r2, [r3, #16]
          break;
 8000b42:	e009      	b.n	8000b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	615a      	str	r2, [r3, #20]
          break;
 8000b4e:	e003      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          break;
 8000b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d801      	bhi.n	8000b62 <HAL_GPIO_Init+0x13a>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	e001      	b.n	8000b66 <HAL_GPIO_Init+0x13e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3304      	adds	r3, #4
 8000b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2bff      	cmp	r3, #255	; 0xff
 8000b6c:	d802      	bhi.n	8000b74 <HAL_GPIO_Init+0x14c>
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x152>
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	3b08      	subs	r3, #8
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	210f      	movs	r1, #15
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	6a39      	ldr	r1, [r7, #32]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	431a      	orrs	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80b1 	beq.w	8000d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a4c      	ldr	r2, [pc, #304]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc0:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_GPIO_Init+0x2c0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d013      	beq.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <HAL_GPIO_Init+0x2c4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00d      	beq.n	8000c10 <HAL_GPIO_Init+0x1e8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3e      	ldr	r2, [pc, #248]	; (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <HAL_GPIO_Init+0x2cc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_GPIO_Init+0x1e0>
 8000c04:	2303      	movs	r3, #3
 8000c06:	e006      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c14:	2300      	movs	r3, #0
 8000c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c26:	492f      	ldr	r1, [pc, #188]	; (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	492c      	ldr	r1, [pc, #176]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4928      	ldr	r1, [pc, #160]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	4922      	ldr	r1, [pc, #136]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60cb      	str	r3, [r1, #12]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	491e      	ldr	r1, [pc, #120]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4918      	ldr	r1, [pc, #96]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4914      	ldr	r1, [pc, #80]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d021      	beq.n	8000cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e021      	b.n	8000d0a <HAL_GPIO_Init+0x2e2>
 8000cc6:	bf00      	nop
 8000cc8:	10320000 	.word	0x10320000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10220000 	.word	0x10220000
 8000cd4:	10210000 	.word	0x10210000
 8000cd8:	10120000 	.word	0x10120000
 8000cdc:	10110000 	.word	0x10110000
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40011400 	.word	0x40011400
 8000cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_GPIO_Init+0x304>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4909      	ldr	r1, [pc, #36]	; (8000d2c <HAL_GPIO_Init+0x304>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f47f ae8e 	bne.w	8000a3c <HAL_GPIO_Init+0x14>
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	372c      	adds	r7, #44	; 0x2c
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d4c:	e003      	b.n	8000d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e272      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8087 	beq.w	8000e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d80:	4b92      	ldr	r3, [pc, #584]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d00c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4b8f      	ldr	r3, [pc, #572]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d112      	bne.n	8000dbe <HAL_RCC_OscConfig+0x5e>
 8000d98:	4b8c      	ldr	r3, [pc, #560]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d10b      	bne.n	8000dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da6:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d06c      	beq.n	8000e8c <HAL_RCC_OscConfig+0x12c>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d168      	bne.n	8000e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e24c      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc6:	d106      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x76>
 8000dc8:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7f      	ldr	r2, [pc, #508]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e02e      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x98>
 8000dde:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a7a      	ldr	r2, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a77      	ldr	r2, [pc, #476]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e01d      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0xbc>
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a71      	ldr	r2, [pc, #452]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a6e      	ldr	r2, [pc, #440]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0xd4>
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a6a      	ldr	r2, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a67      	ldr	r2, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d013      	beq.n	8000e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fd06 	bl	800084c <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fd02 	bl	800084c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e200      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0xe4>
 8000e62:	e014      	b.n	8000e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fcf2 	bl	800084c <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fcee 	bl	800084c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e1ec      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x10c>
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d063      	beq.n	8000f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d11c      	bne.n	8000eec <HAL_RCC_OscConfig+0x18c>
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x176>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e1c0      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4939      	ldr	r1, [pc, #228]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	e03a      	b.n	8000f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d020      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef4:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fca7 	bl	800084c <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fca3 	bl	800084c <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e1a1      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4927      	ldr	r1, [pc, #156]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc86 	bl	800084c <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc82 	bl	800084c <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e180      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d03a      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d019      	beq.n	8000faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fc66 	bl	800084c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fc62 	bl	800084c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e160      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 face 	bl	8001544 <RCC_Delay>
 8000fa8:	e01c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fc4c 	bl	800084c <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb6:	e00f      	b.n	8000fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc48 	bl	800084c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d908      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e146      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	42420000 	.word	0x42420000
 8000fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	4b92      	ldr	r3, [pc, #584]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e9      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80a6 	beq.w	800113e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10d      	bne.n	800101e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b88      	ldr	r3, [pc, #544]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a87      	ldr	r2, [pc, #540]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b85      	ldr	r3, [pc, #532]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <HAL_RCC_OscConfig+0x4c8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d118      	bne.n	800105c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102a:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <HAL_RCC_OscConfig+0x4c8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <HAL_RCC_OscConfig+0x4c8>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001036:	f7ff fc09 	bl	800084c <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103e:	f7ff fc05 	bl	800084c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b64      	cmp	r3, #100	; 0x64
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e103      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <HAL_RCC_OscConfig+0x4c8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x312>
 8001064:	4b6f      	ldr	r3, [pc, #444]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a6e      	ldr	r2, [pc, #440]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	e02d      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x334>
 800107a:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a69      	ldr	r2, [pc, #420]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a66      	ldr	r2, [pc, #408]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	e01c      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d10c      	bne.n	80010b6 <HAL_RCC_OscConfig+0x356>
 800109c:	4b61      	ldr	r3, [pc, #388]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a60      	ldr	r2, [pc, #384]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	4b5e      	ldr	r3, [pc, #376]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a5d      	ldr	r2, [pc, #372]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6213      	str	r3, [r2, #32]
 80010b4:	e00b      	b.n	80010ce <HAL_RCC_OscConfig+0x36e>
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a5a      	ldr	r2, [pc, #360]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	4b58      	ldr	r3, [pc, #352]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a57      	ldr	r2, [pc, #348]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d015      	beq.n	8001102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fbb9 	bl	800084c <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fbb5 	bl	800084c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0b1      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0ee      	beq.n	80010de <HAL_RCC_OscConfig+0x37e>
 8001100:	e014      	b.n	800112c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fba3 	bl	800084c <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb9f 	bl	800084c <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e09b      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ee      	bne.n	800110a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d105      	bne.n	800113e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d061      	beq.n	8001218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d146      	bne.n	80011ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_RCC_OscConfig+0x4cc>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fb73 	bl	800084c <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fb6f 	bl	800084c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e06d      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d108      	bne.n	80011a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4921      	ldr	r1, [pc, #132]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a19      	ldr	r1, [r3, #32]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	430b      	orrs	r3, r1
 80011b6:	491b      	ldr	r1, [pc, #108]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x4cc>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb43 	bl	800084c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ca:	f7ff fb3f 	bl	800084c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e03d      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x46a>
 80011e8:	e035      	b.n	8001256 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_RCC_OscConfig+0x4cc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb2c 	bl	800084c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fb28 	bl	800084c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e026      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x498>
 8001216:	e01e      	b.n	8001256 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e019      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
 8001224:	40021000 	.word	0x40021000
 8001228:	40007000 	.word	0x40007000
 800122c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x500>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	429a      	cmp	r2, r3
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0d0      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d910      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 0207 	bic.w	r2, r3, #7
 800128e:	4965      	ldr	r1, [pc, #404]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b8      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	494d      	ldr	r1, [pc, #308]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d040      	beq.n	8001384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e07f      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e073      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e06b      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f023 0203 	bic.w	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4936      	ldr	r1, [pc, #216]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fa7a 	bl	800084c <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	e00a      	b.n	8001372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7ff fa76 	bl	800084c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e053      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 020c 	and.w	r2, r3, #12
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1eb      	bne.n	800135c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d210      	bcs.n	80013b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 0207 	bic.w	r2, r3, #7
 800139a:	4922      	ldr	r1, [pc, #136]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e032      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f2:	f000 f821 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <HAL_RCC_ClockConfig+0x1c8>)
 8001404:	5ccb      	ldrb	r3, [r1, r3]
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x1cc>)
 800140c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1d0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f9d8 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000
 8001428:	40021000 	.word	0x40021000
 800142c:	08002ff8 	.word	0x08002ff8
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x30>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x36>
 8001466:	e027      	b.n	80014b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800146a:	613b      	str	r3, [r7, #16]
      break;
 800146c:	e027      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d010      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0c5b      	lsrs	r3, r3, #17
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800149a:	fb03 f202 	mul.w	r2, r3, r2
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e004      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	613b      	str	r3, [r7, #16]
      break;
 80014b6:	e002      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014be:	693b      	ldr	r3, [r7, #16]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	08003010 	.word	0x08003010
 80014d8:	08003020 	.word	0x08003020
 80014dc:	003d0900 	.word	0x003d0900

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f8:	f7ff fff2 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4903      	ldr	r1, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	08003008 	.word	0x08003008

0800151c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001520:	f7ff ffde 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	0adb      	lsrs	r3, r3, #11
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4903      	ldr	r1, [pc, #12]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	08003008 	.word	0x08003008

08001544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <RCC_Delay+0x34>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <RCC_Delay+0x38>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a5b      	lsrs	r3, r3, #9
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001560:	bf00      	nop
  }
  while (Delay --);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	60fa      	str	r2, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f9      	bne.n	8001560 <RCC_Delay+0x1c>
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e076      	b.n	8001680 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	2b00      	cmp	r3, #0
 8001598:	d108      	bne.n	80015ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015a2:	d009      	beq.n	80015b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
 80015aa:	e005      	b.n	80015b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ff76 	bl	80004c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	ea42 0103 	orr.w	r1, r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	0c1a      	lsrs	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f002 0204 	and.w	r2, r2, #4
 800165e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001696:	2301      	movs	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_SPI_TransmitReceive+0x26>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e198      	b.n	80019e0 <HAL_SPI_TransmitReceive+0x358>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016b6:	f7ff f8c9 	bl	800084c <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80016d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00f      	beq.n	80016f8 <HAL_SPI_TransmitReceive+0x70>
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016de:	d107      	bne.n	80016f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <HAL_SPI_TransmitReceive+0x68>
 80016e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d003      	beq.n	80016f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80016f6:	e16d      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_SPI_TransmitReceive+0x82>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_SPI_TransmitReceive+0x82>
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001710:	e160      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b04      	cmp	r3, #4
 800171c:	d003      	beq.n	8001726 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2205      	movs	r2, #5
 8001722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	d007      	beq.n	800177a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001782:	d17c      	bne.n	800187e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_SPI_TransmitReceive+0x10a>
 800178c:	8b7b      	ldrh	r3, [r7, #26]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d16a      	bne.n	8001868 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	1c9a      	adds	r2, r3, #2
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017b6:	e057      	b.n	8001868 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d11b      	bne.n	80017fe <HAL_SPI_TransmitReceive+0x176>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d016      	beq.n	80017fe <HAL_SPI_TransmitReceive+0x176>
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d113      	bne.n	80017fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	1c9a      	adds	r2, r3, #2
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d119      	bne.n	8001840 <HAL_SPI_TransmitReceive+0x1b8>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d014      	beq.n	8001840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	b292      	uxth	r2, r2
 8001822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	1c9a      	adds	r2, r3, #2
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800183c:	2301      	movs	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001840:	f7ff f804 	bl	800084c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800184c:	429a      	cmp	r2, r3
 800184e:	d80b      	bhi.n	8001868 <HAL_SPI_TransmitReceive+0x1e0>
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001856:	d007      	beq.n	8001868 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001866:	e0b5      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1a2      	bne.n	80017b8 <HAL_SPI_TransmitReceive+0x130>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d19d      	bne.n	80017b8 <HAL_SPI_TransmitReceive+0x130>
 800187c:	e080      	b.n	8001980 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_SPI_TransmitReceive+0x204>
 8001886:	8b7b      	ldrh	r3, [r7, #26]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d16f      	bne.n	800196c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	330c      	adds	r3, #12
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018b2:	e05b      	b.n	800196c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d11c      	bne.n	80018fc <HAL_SPI_TransmitReceive+0x274>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d017      	beq.n	80018fc <HAL_SPI_TransmitReceive+0x274>
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d114      	bne.n	80018fc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	330c      	adds	r3, #12
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d119      	bne.n	800193e <HAL_SPI_TransmitReceive+0x2b6>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d014      	beq.n	800193e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001930:	b29b      	uxth	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800193a:	2301      	movs	r3, #1
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800193e:	f7fe ff85 	bl	800084c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800194a:	429a      	cmp	r2, r3
 800194c:	d803      	bhi.n	8001956 <HAL_SPI_TransmitReceive+0x2ce>
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001954:	d102      	bne.n	800195c <HAL_SPI_TransmitReceive+0x2d4>
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800196a:	e033      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d19e      	bne.n	80018b4 <HAL_SPI_TransmitReceive+0x22c>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d199      	bne.n	80018b4 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f8b7 	bl	8001af8 <SPI_EndRxTxTransaction>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800199c:	e01a      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10a      	bne.n	80019bc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019ca:	e003      	b.n	80019d4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80019f8:	f7fe ff28 	bl	800084c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001a08:	f7fe ff20 	bl	800084c <HAL_GetTick>
 8001a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	015b      	lsls	r3, r3, #5
 8001a14:	0d1b      	lsrs	r3, r3, #20
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a1e:	e054      	b.n	8001aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a26:	d050      	beq.n	8001aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001a28:	f7fe ff10 	bl	800084c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d902      	bls.n	8001a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d13d      	bne.n	8001aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a56:	d111      	bne.n	8001a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a60:	d004      	beq.n	8001a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d107      	bne.n	8001a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a84:	d10f      	bne.n	8001aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e017      	b.n	8001aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d19b      	bne.n	8001a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff6a 	bl	80019e8 <SPI_WaitFlagStateUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e000      	b.n	8001b2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e042      	b.n	8001bcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fcfc 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f91d 	bl	8001db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d16d      	bne.n	8001cd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_UART_Transmit+0x2c>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e066      	b.n	8001cd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2221      	movs	r2, #33	; 0x21
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c12:	f7fe fe1b 	bl	800084c <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d108      	bne.n	8001c40 <HAL_UART_Transmit+0x6c>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d104      	bne.n	8001c40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	e003      	b.n	8001c48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c48:	e02a      	b.n	8001ca0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2200      	movs	r2, #0
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f840 	bl	8001cda <UART_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e036      	b.n	8001cd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	e007      	b.n	8001c92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1cf      	bne.n	8001c4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f810 	bl	8001cda <UART_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e006      	b.n	8001cd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b090      	sub	sp, #64	; 0x40
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cea:	e050      	b.n	8001d8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf2:	d04c      	beq.n	8001d8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8001cfa:	f7fe fda7 	bl	800084c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d241      	bcs.n	8001d8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	330c      	adds	r3, #12
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	e853 3f00 	ldrex	r3, [r3]
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	330c      	adds	r3, #12
 8001d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d2a:	637a      	str	r2, [r7, #52]	; 0x34
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d32:	e841 2300 	strex	r3, r2, [r1]
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e5      	bne.n	8001d0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3314      	adds	r3, #20
 8001d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	e853 3f00 	ldrex	r3, [r3]
 8001d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3314      	adds	r3, #20
 8001d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d5e:	623a      	str	r2, [r7, #32]
 8001d60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d62:	69f9      	ldr	r1, [r7, #28]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	e841 2300 	strex	r3, r2, [r1]
 8001d6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e5      	bne.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e00f      	b.n	8001dae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4013      	ands	r3, r2
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d09f      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3740      	adds	r7, #64	; 0x40
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001df2:	f023 030c 	bic.w	r3, r3, #12
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2c      	ldr	r2, [pc, #176]	; (8001ecc <UART_SetConfig+0x114>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d103      	bne.n	8001e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e20:	f7ff fb7c 	bl	800151c <HAL_RCC_GetPCLK2Freq>
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	e002      	b.n	8001e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e28:	f7ff fb64 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	441a      	add	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	0119      	lsls	r1, r3, #4
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e66:	fba3 0302 	umull	r0, r3, r3, r2
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	fb00 f303 	mul.w	r3, r0, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	3332      	adds	r3, #50	; 0x32
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	4419      	add	r1, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <UART_SetConfig+0x118>)
 8001e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	fb00 f303 	mul.w	r3, r0, r3
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	3332      	adds	r3, #50	; 0x32
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <UART_SetConfig+0x118>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	440a      	add	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	51eb851f 	.word	0x51eb851f

08001ed4 <std>:
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	b510      	push	{r4, lr}
 8001ed8:	4604      	mov	r4, r0
 8001eda:	e9c0 3300 	strd	r3, r3, [r0]
 8001ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ee2:	6083      	str	r3, [r0, #8]
 8001ee4:	8181      	strh	r1, [r0, #12]
 8001ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ee8:	81c2      	strh	r2, [r0, #14]
 8001eea:	6183      	str	r3, [r0, #24]
 8001eec:	4619      	mov	r1, r3
 8001eee:	2208      	movs	r2, #8
 8001ef0:	305c      	adds	r0, #92	; 0x5c
 8001ef2:	f000 faad 	bl	8002450 <memset>
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <std+0x58>)
 8001ef8:	6224      	str	r4, [r4, #32]
 8001efa:	6263      	str	r3, [r4, #36]	; 0x24
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <std+0x5c>)
 8001efe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <std+0x60>)
 8001f02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <std+0x64>)
 8001f06:	6323      	str	r3, [r4, #48]	; 0x30
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <std+0x68>)
 8001f0a:	429c      	cmp	r4, r3
 8001f0c:	d006      	beq.n	8001f1c <std+0x48>
 8001f0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001f12:	4294      	cmp	r4, r2
 8001f14:	d002      	beq.n	8001f1c <std+0x48>
 8001f16:	33d0      	adds	r3, #208	; 0xd0
 8001f18:	429c      	cmp	r4, r3
 8001f1a:	d105      	bne.n	8001f28 <std+0x54>
 8001f1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f24:	f000 bb0c 	b.w	8002540 <__retarget_lock_init_recursive>
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	080022a1 	.word	0x080022a1
 8001f30:	080022c3 	.word	0x080022c3
 8001f34:	080022fb 	.word	0x080022fb
 8001f38:	0800231f 	.word	0x0800231f
 8001f3c:	20000130 	.word	0x20000130

08001f40 <stdio_exit_handler>:
 8001f40:	4a02      	ldr	r2, [pc, #8]	; (8001f4c <stdio_exit_handler+0xc>)
 8001f42:	4903      	ldr	r1, [pc, #12]	; (8001f50 <stdio_exit_handler+0x10>)
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <stdio_exit_handler+0x14>)
 8001f46:	f000 b869 	b.w	800201c <_fwalk_sglue>
 8001f4a:	bf00      	nop
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	08002df1 	.word	0x08002df1
 8001f54:	20000018 	.word	0x20000018

08001f58 <cleanup_stdio>:
 8001f58:	6841      	ldr	r1, [r0, #4]
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <cleanup_stdio+0x34>)
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	4299      	cmp	r1, r3
 8001f60:	4604      	mov	r4, r0
 8001f62:	d001      	beq.n	8001f68 <cleanup_stdio+0x10>
 8001f64:	f000 ff44 	bl	8002df0 <_fflush_r>
 8001f68:	68a1      	ldr	r1, [r4, #8]
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <cleanup_stdio+0x38>)
 8001f6c:	4299      	cmp	r1, r3
 8001f6e:	d002      	beq.n	8001f76 <cleanup_stdio+0x1e>
 8001f70:	4620      	mov	r0, r4
 8001f72:	f000 ff3d 	bl	8002df0 <_fflush_r>
 8001f76:	68e1      	ldr	r1, [r4, #12]
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <cleanup_stdio+0x3c>)
 8001f7a:	4299      	cmp	r1, r3
 8001f7c:	d004      	beq.n	8001f88 <cleanup_stdio+0x30>
 8001f7e:	4620      	mov	r0, r4
 8001f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f84:	f000 bf34 	b.w	8002df0 <_fflush_r>
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000130 	.word	0x20000130
 8001f90:	20000198 	.word	0x20000198
 8001f94:	20000200 	.word	0x20000200

08001f98 <global_stdio_init.part.0>:
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <global_stdio_init.part.0+0x30>)
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <global_stdio_init.part.0+0x34>)
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <global_stdio_init.part.0+0x38>)
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f7ff ff94 	bl	8001ed4 <std>
 8001fac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2109      	movs	r1, #9
 8001fb4:	f7ff ff8e 	bl	8001ed4 <std>
 8001fb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fc2:	2112      	movs	r1, #18
 8001fc4:	f7ff bf86 	b.w	8001ed4 <std>
 8001fc8:	20000268 	.word	0x20000268
 8001fcc:	20000130 	.word	0x20000130
 8001fd0:	08001f41 	.word	0x08001f41

08001fd4 <__sfp_lock_acquire>:
 8001fd4:	4801      	ldr	r0, [pc, #4]	; (8001fdc <__sfp_lock_acquire+0x8>)
 8001fd6:	f000 bab4 	b.w	8002542 <__retarget_lock_acquire_recursive>
 8001fda:	bf00      	nop
 8001fdc:	20000271 	.word	0x20000271

08001fe0 <__sfp_lock_release>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <__sfp_lock_release+0x8>)
 8001fe2:	f000 baaf 	b.w	8002544 <__retarget_lock_release_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	20000271 	.word	0x20000271

08001fec <__sinit>:
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
 8001ff0:	f7ff fff0 	bl	8001fd4 <__sfp_lock_acquire>
 8001ff4:	6a23      	ldr	r3, [r4, #32]
 8001ff6:	b11b      	cbz	r3, 8002000 <__sinit+0x14>
 8001ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ffc:	f7ff bff0 	b.w	8001fe0 <__sfp_lock_release>
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <__sinit+0x28>)
 8002002:	6223      	str	r3, [r4, #32]
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__sinit+0x2c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f5      	bne.n	8001ff8 <__sinit+0xc>
 800200c:	f7ff ffc4 	bl	8001f98 <global_stdio_init.part.0>
 8002010:	e7f2      	b.n	8001ff8 <__sinit+0xc>
 8002012:	bf00      	nop
 8002014:	08001f59 	.word	0x08001f59
 8002018:	20000268 	.word	0x20000268

0800201c <_fwalk_sglue>:
 800201c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002020:	4607      	mov	r7, r0
 8002022:	4688      	mov	r8, r1
 8002024:	4614      	mov	r4, r2
 8002026:	2600      	movs	r6, #0
 8002028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800202c:	f1b9 0901 	subs.w	r9, r9, #1
 8002030:	d505      	bpl.n	800203e <_fwalk_sglue+0x22>
 8002032:	6824      	ldr	r4, [r4, #0]
 8002034:	2c00      	cmp	r4, #0
 8002036:	d1f7      	bne.n	8002028 <_fwalk_sglue+0xc>
 8002038:	4630      	mov	r0, r6
 800203a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800203e:	89ab      	ldrh	r3, [r5, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d907      	bls.n	8002054 <_fwalk_sglue+0x38>
 8002044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002048:	3301      	adds	r3, #1
 800204a:	d003      	beq.n	8002054 <_fwalk_sglue+0x38>
 800204c:	4629      	mov	r1, r5
 800204e:	4638      	mov	r0, r7
 8002050:	47c0      	blx	r8
 8002052:	4306      	orrs	r6, r0
 8002054:	3568      	adds	r5, #104	; 0x68
 8002056:	e7e9      	b.n	800202c <_fwalk_sglue+0x10>

08002058 <iprintf>:
 8002058:	b40f      	push	{r0, r1, r2, r3}
 800205a:	b507      	push	{r0, r1, r2, lr}
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <iprintf+0x20>)
 800205e:	ab04      	add	r3, sp, #16
 8002060:	6808      	ldr	r0, [r1, #0]
 8002062:	f853 2b04 	ldr.w	r2, [r3], #4
 8002066:	6881      	ldr	r1, [r0, #8]
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	f000 fb91 	bl	8002790 <_vfiprintf_r>
 800206e:	b003      	add	sp, #12
 8002070:	f85d eb04 	ldr.w	lr, [sp], #4
 8002074:	b004      	add	sp, #16
 8002076:	4770      	bx	lr
 8002078:	20000064 	.word	0x20000064

0800207c <_puts_r>:
 800207c:	6a03      	ldr	r3, [r0, #32]
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	4605      	mov	r5, r0
 8002082:	460e      	mov	r6, r1
 8002084:	6884      	ldr	r4, [r0, #8]
 8002086:	b90b      	cbnz	r3, 800208c <_puts_r+0x10>
 8002088:	f7ff ffb0 	bl	8001fec <__sinit>
 800208c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800208e:	07db      	lsls	r3, r3, #31
 8002090:	d405      	bmi.n	800209e <_puts_r+0x22>
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	0598      	lsls	r0, r3, #22
 8002096:	d402      	bmi.n	800209e <_puts_r+0x22>
 8002098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800209a:	f000 fa52 	bl	8002542 <__retarget_lock_acquire_recursive>
 800209e:	89a3      	ldrh	r3, [r4, #12]
 80020a0:	0719      	lsls	r1, r3, #28
 80020a2:	d513      	bpl.n	80020cc <_puts_r+0x50>
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	b18b      	cbz	r3, 80020cc <_puts_r+0x50>
 80020a8:	3e01      	subs	r6, #1
 80020aa:	68a3      	ldr	r3, [r4, #8]
 80020ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60a3      	str	r3, [r4, #8]
 80020b4:	b9e9      	cbnz	r1, 80020f2 <_puts_r+0x76>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da2e      	bge.n	8002118 <_puts_r+0x9c>
 80020ba:	4622      	mov	r2, r4
 80020bc:	210a      	movs	r1, #10
 80020be:	4628      	mov	r0, r5
 80020c0:	f000 f931 	bl	8002326 <__swbuf_r>
 80020c4:	3001      	adds	r0, #1
 80020c6:	d007      	beq.n	80020d8 <_puts_r+0x5c>
 80020c8:	250a      	movs	r5, #10
 80020ca:	e007      	b.n	80020dc <_puts_r+0x60>
 80020cc:	4621      	mov	r1, r4
 80020ce:	4628      	mov	r0, r5
 80020d0:	f000 f966 	bl	80023a0 <__swsetup_r>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d0e7      	beq.n	80020a8 <_puts_r+0x2c>
 80020d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80020dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020de:	07da      	lsls	r2, r3, #31
 80020e0:	d405      	bmi.n	80020ee <_puts_r+0x72>
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	059b      	lsls	r3, r3, #22
 80020e6:	d402      	bmi.n	80020ee <_puts_r+0x72>
 80020e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020ea:	f000 fa2b 	bl	8002544 <__retarget_lock_release_recursive>
 80020ee:	4628      	mov	r0, r5
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da04      	bge.n	8002100 <_puts_r+0x84>
 80020f6:	69a2      	ldr	r2, [r4, #24]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dc06      	bgt.n	800210a <_puts_r+0x8e>
 80020fc:	290a      	cmp	r1, #10
 80020fe:	d004      	beq.n	800210a <_puts_r+0x8e>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	6022      	str	r2, [r4, #0]
 8002106:	7019      	strb	r1, [r3, #0]
 8002108:	e7cf      	b.n	80020aa <_puts_r+0x2e>
 800210a:	4622      	mov	r2, r4
 800210c:	4628      	mov	r0, r5
 800210e:	f000 f90a 	bl	8002326 <__swbuf_r>
 8002112:	3001      	adds	r0, #1
 8002114:	d1c9      	bne.n	80020aa <_puts_r+0x2e>
 8002116:	e7df      	b.n	80020d8 <_puts_r+0x5c>
 8002118:	250a      	movs	r5, #10
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	6022      	str	r2, [r4, #0]
 8002120:	701d      	strb	r5, [r3, #0]
 8002122:	e7db      	b.n	80020dc <_puts_r+0x60>

08002124 <puts>:
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <puts+0xc>)
 8002126:	4601      	mov	r1, r0
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	f7ff bfa7 	b.w	800207c <_puts_r>
 800212e:	bf00      	nop
 8002130:	20000064 	.word	0x20000064

08002134 <setbuf>:
 8002134:	fab1 f281 	clz	r2, r1
 8002138:	0952      	lsrs	r2, r2, #5
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	0052      	lsls	r2, r2, #1
 8002140:	f000 b800 	b.w	8002144 <setvbuf>

08002144 <setvbuf>:
 8002144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002148:	461d      	mov	r5, r3
 800214a:	4b54      	ldr	r3, [pc, #336]	; (800229c <setvbuf+0x158>)
 800214c:	4604      	mov	r4, r0
 800214e:	681f      	ldr	r7, [r3, #0]
 8002150:	460e      	mov	r6, r1
 8002152:	4690      	mov	r8, r2
 8002154:	b127      	cbz	r7, 8002160 <setvbuf+0x1c>
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	b913      	cbnz	r3, 8002160 <setvbuf+0x1c>
 800215a:	4638      	mov	r0, r7
 800215c:	f7ff ff46 	bl	8001fec <__sinit>
 8002160:	f1b8 0f02 	cmp.w	r8, #2
 8002164:	d006      	beq.n	8002174 <setvbuf+0x30>
 8002166:	f1b8 0f01 	cmp.w	r8, #1
 800216a:	f200 8094 	bhi.w	8002296 <setvbuf+0x152>
 800216e:	2d00      	cmp	r5, #0
 8002170:	f2c0 8091 	blt.w	8002296 <setvbuf+0x152>
 8002174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002176:	07da      	lsls	r2, r3, #31
 8002178:	d405      	bmi.n	8002186 <setvbuf+0x42>
 800217a:	89a3      	ldrh	r3, [r4, #12]
 800217c:	059b      	lsls	r3, r3, #22
 800217e:	d402      	bmi.n	8002186 <setvbuf+0x42>
 8002180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002182:	f000 f9de 	bl	8002542 <__retarget_lock_acquire_recursive>
 8002186:	4621      	mov	r1, r4
 8002188:	4638      	mov	r0, r7
 800218a:	f000 fe31 	bl	8002df0 <_fflush_r>
 800218e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002190:	b141      	cbz	r1, 80021a4 <setvbuf+0x60>
 8002192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002196:	4299      	cmp	r1, r3
 8002198:	d002      	beq.n	80021a0 <setvbuf+0x5c>
 800219a:	4638      	mov	r0, r7
 800219c:	f000 f9d4 	bl	8002548 <_free_r>
 80021a0:	2300      	movs	r3, #0
 80021a2:	6363      	str	r3, [r4, #52]	; 0x34
 80021a4:	2300      	movs	r3, #0
 80021a6:	61a3      	str	r3, [r4, #24]
 80021a8:	6063      	str	r3, [r4, #4]
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	0618      	lsls	r0, r3, #24
 80021ae:	d503      	bpl.n	80021b8 <setvbuf+0x74>
 80021b0:	4638      	mov	r0, r7
 80021b2:	6921      	ldr	r1, [r4, #16]
 80021b4:	f000 f9c8 	bl	8002548 <_free_r>
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	f1b8 0f02 	cmp.w	r8, #2
 80021be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	81a3      	strh	r3, [r4, #12]
 80021c8:	d05f      	beq.n	800228a <setvbuf+0x146>
 80021ca:	ab01      	add	r3, sp, #4
 80021cc:	466a      	mov	r2, sp
 80021ce:	4621      	mov	r1, r4
 80021d0:	4638      	mov	r0, r7
 80021d2:	f000 fe35 	bl	8002e40 <__swhatbuf_r>
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	4318      	orrs	r0, r3
 80021da:	81a0      	strh	r0, [r4, #12]
 80021dc:	bb2d      	cbnz	r5, 800222a <setvbuf+0xe6>
 80021de:	9d00      	ldr	r5, [sp, #0]
 80021e0:	4628      	mov	r0, r5
 80021e2:	f000 f9f9 	bl	80025d8 <malloc>
 80021e6:	4606      	mov	r6, r0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d150      	bne.n	800228e <setvbuf+0x14a>
 80021ec:	f8dd 9000 	ldr.w	r9, [sp]
 80021f0:	45a9      	cmp	r9, r5
 80021f2:	d13e      	bne.n	8002272 <setvbuf+0x12e>
 80021f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80021f8:	2200      	movs	r2, #0
 80021fa:	60a2      	str	r2, [r4, #8]
 80021fc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002200:	6022      	str	r2, [r4, #0]
 8002202:	6122      	str	r2, [r4, #16]
 8002204:	2201      	movs	r2, #1
 8002206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800220a:	6162      	str	r2, [r4, #20]
 800220c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	07d1      	lsls	r1, r2, #31
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	d404      	bmi.n	8002222 <setvbuf+0xde>
 8002218:	059b      	lsls	r3, r3, #22
 800221a:	d402      	bmi.n	8002222 <setvbuf+0xde>
 800221c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800221e:	f000 f991 	bl	8002544 <__retarget_lock_release_recursive>
 8002222:	4628      	mov	r0, r5
 8002224:	b003      	add	sp, #12
 8002226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800222a:	2e00      	cmp	r6, #0
 800222c:	d0d8      	beq.n	80021e0 <setvbuf+0x9c>
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	b913      	cbnz	r3, 8002238 <setvbuf+0xf4>
 8002232:	4638      	mov	r0, r7
 8002234:	f7ff feda 	bl	8001fec <__sinit>
 8002238:	f1b8 0f01 	cmp.w	r8, #1
 800223c:	bf08      	it	eq
 800223e:	89a3      	ldrheq	r3, [r4, #12]
 8002240:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002244:	bf04      	itt	eq
 8002246:	f043 0301 	orreq.w	r3, r3, #1
 800224a:	81a3      	strheq	r3, [r4, #12]
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	6026      	str	r6, [r4, #0]
 8002250:	f013 0208 	ands.w	r2, r3, #8
 8002254:	d01d      	beq.n	8002292 <setvbuf+0x14e>
 8002256:	07da      	lsls	r2, r3, #31
 8002258:	bf41      	itttt	mi
 800225a:	2200      	movmi	r2, #0
 800225c:	426d      	negmi	r5, r5
 800225e:	60a2      	strmi	r2, [r4, #8]
 8002260:	61a5      	strmi	r5, [r4, #24]
 8002262:	bf58      	it	pl
 8002264:	60a5      	strpl	r5, [r4, #8]
 8002266:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002268:	f015 0501 	ands.w	r5, r5, #1
 800226c:	d0d4      	beq.n	8002218 <setvbuf+0xd4>
 800226e:	2500      	movs	r5, #0
 8002270:	e7d7      	b.n	8002222 <setvbuf+0xde>
 8002272:	4648      	mov	r0, r9
 8002274:	f000 f9b0 	bl	80025d8 <malloc>
 8002278:	4606      	mov	r6, r0
 800227a:	2800      	cmp	r0, #0
 800227c:	d0ba      	beq.n	80021f4 <setvbuf+0xb0>
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	464d      	mov	r5, r9
 8002282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	e7d1      	b.n	800222e <setvbuf+0xea>
 800228a:	2500      	movs	r5, #0
 800228c:	e7b4      	b.n	80021f8 <setvbuf+0xb4>
 800228e:	46a9      	mov	r9, r5
 8002290:	e7f5      	b.n	800227e <setvbuf+0x13a>
 8002292:	60a2      	str	r2, [r4, #8]
 8002294:	e7e7      	b.n	8002266 <setvbuf+0x122>
 8002296:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800229a:	e7c2      	b.n	8002222 <setvbuf+0xde>
 800229c:	20000064 	.word	0x20000064

080022a0 <__sread>:
 80022a0:	b510      	push	{r4, lr}
 80022a2:	460c      	mov	r4, r1
 80022a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a8:	f000 f8fc 	bl	80024a4 <_read_r>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	bfab      	itete	ge
 80022b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022b2:	89a3      	ldrhlt	r3, [r4, #12]
 80022b4:	181b      	addge	r3, r3, r0
 80022b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022ba:	bfac      	ite	ge
 80022bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80022be:	81a3      	strhlt	r3, [r4, #12]
 80022c0:	bd10      	pop	{r4, pc}

080022c2 <__swrite>:
 80022c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c6:	461f      	mov	r7, r3
 80022c8:	898b      	ldrh	r3, [r1, #12]
 80022ca:	4605      	mov	r5, r0
 80022cc:	05db      	lsls	r3, r3, #23
 80022ce:	460c      	mov	r4, r1
 80022d0:	4616      	mov	r6, r2
 80022d2:	d505      	bpl.n	80022e0 <__swrite+0x1e>
 80022d4:	2302      	movs	r3, #2
 80022d6:	2200      	movs	r2, #0
 80022d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022dc:	f000 f8d0 	bl	8002480 <_lseek_r>
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	4632      	mov	r2, r6
 80022e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	4628      	mov	r0, r5
 80022ec:	463b      	mov	r3, r7
 80022ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022f6:	f000 b8e7 	b.w	80024c8 <_write_r>

080022fa <__sseek>:
 80022fa:	b510      	push	{r4, lr}
 80022fc:	460c      	mov	r4, r1
 80022fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002302:	f000 f8bd 	bl	8002480 <_lseek_r>
 8002306:	1c43      	adds	r3, r0, #1
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	bf15      	itete	ne
 800230c:	6560      	strne	r0, [r4, #84]	; 0x54
 800230e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002316:	81a3      	strheq	r3, [r4, #12]
 8002318:	bf18      	it	ne
 800231a:	81a3      	strhne	r3, [r4, #12]
 800231c:	bd10      	pop	{r4, pc}

0800231e <__sclose>:
 800231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002322:	f000 b89d 	b.w	8002460 <_close_r>

08002326 <__swbuf_r>:
 8002326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002328:	460e      	mov	r6, r1
 800232a:	4614      	mov	r4, r2
 800232c:	4605      	mov	r5, r0
 800232e:	b118      	cbz	r0, 8002338 <__swbuf_r+0x12>
 8002330:	6a03      	ldr	r3, [r0, #32]
 8002332:	b90b      	cbnz	r3, 8002338 <__swbuf_r+0x12>
 8002334:	f7ff fe5a 	bl	8001fec <__sinit>
 8002338:	69a3      	ldr	r3, [r4, #24]
 800233a:	60a3      	str	r3, [r4, #8]
 800233c:	89a3      	ldrh	r3, [r4, #12]
 800233e:	071a      	lsls	r2, r3, #28
 8002340:	d525      	bpl.n	800238e <__swbuf_r+0x68>
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	b31b      	cbz	r3, 800238e <__swbuf_r+0x68>
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	6922      	ldr	r2, [r4, #16]
 800234a:	b2f6      	uxtb	r6, r6
 800234c:	1a98      	subs	r0, r3, r2
 800234e:	6963      	ldr	r3, [r4, #20]
 8002350:	4637      	mov	r7, r6
 8002352:	4283      	cmp	r3, r0
 8002354:	dc04      	bgt.n	8002360 <__swbuf_r+0x3a>
 8002356:	4621      	mov	r1, r4
 8002358:	4628      	mov	r0, r5
 800235a:	f000 fd49 	bl	8002df0 <_fflush_r>
 800235e:	b9e0      	cbnz	r0, 800239a <__swbuf_r+0x74>
 8002360:	68a3      	ldr	r3, [r4, #8]
 8002362:	3b01      	subs	r3, #1
 8002364:	60a3      	str	r3, [r4, #8]
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	6022      	str	r2, [r4, #0]
 800236c:	701e      	strb	r6, [r3, #0]
 800236e:	6962      	ldr	r2, [r4, #20]
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	429a      	cmp	r2, r3
 8002374:	d004      	beq.n	8002380 <__swbuf_r+0x5a>
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	d506      	bpl.n	800238a <__swbuf_r+0x64>
 800237c:	2e0a      	cmp	r6, #10
 800237e:	d104      	bne.n	800238a <__swbuf_r+0x64>
 8002380:	4621      	mov	r1, r4
 8002382:	4628      	mov	r0, r5
 8002384:	f000 fd34 	bl	8002df0 <_fflush_r>
 8002388:	b938      	cbnz	r0, 800239a <__swbuf_r+0x74>
 800238a:	4638      	mov	r0, r7
 800238c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238e:	4621      	mov	r1, r4
 8002390:	4628      	mov	r0, r5
 8002392:	f000 f805 	bl	80023a0 <__swsetup_r>
 8002396:	2800      	cmp	r0, #0
 8002398:	d0d5      	beq.n	8002346 <__swbuf_r+0x20>
 800239a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800239e:	e7f4      	b.n	800238a <__swbuf_r+0x64>

080023a0 <__swsetup_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <__swsetup_r+0xac>)
 80023a4:	4605      	mov	r5, r0
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	460c      	mov	r4, r1
 80023aa:	b118      	cbz	r0, 80023b4 <__swsetup_r+0x14>
 80023ac:	6a03      	ldr	r3, [r0, #32]
 80023ae:	b90b      	cbnz	r3, 80023b4 <__swsetup_r+0x14>
 80023b0:	f7ff fe1c 	bl	8001fec <__sinit>
 80023b4:	89a3      	ldrh	r3, [r4, #12]
 80023b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023ba:	0718      	lsls	r0, r3, #28
 80023bc:	d422      	bmi.n	8002404 <__swsetup_r+0x64>
 80023be:	06d9      	lsls	r1, r3, #27
 80023c0:	d407      	bmi.n	80023d2 <__swsetup_r+0x32>
 80023c2:	2309      	movs	r3, #9
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	e034      	b.n	800243c <__swsetup_r+0x9c>
 80023d2:	0758      	lsls	r0, r3, #29
 80023d4:	d512      	bpl.n	80023fc <__swsetup_r+0x5c>
 80023d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023d8:	b141      	cbz	r1, 80023ec <__swsetup_r+0x4c>
 80023da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023de:	4299      	cmp	r1, r3
 80023e0:	d002      	beq.n	80023e8 <__swsetup_r+0x48>
 80023e2:	4628      	mov	r0, r5
 80023e4:	f000 f8b0 	bl	8002548 <_free_r>
 80023e8:	2300      	movs	r3, #0
 80023ea:	6363      	str	r3, [r4, #52]	; 0x34
 80023ec:	89a3      	ldrh	r3, [r4, #12]
 80023ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	2300      	movs	r3, #0
 80023f6:	6063      	str	r3, [r4, #4]
 80023f8:	6923      	ldr	r3, [r4, #16]
 80023fa:	6023      	str	r3, [r4, #0]
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	81a3      	strh	r3, [r4, #12]
 8002404:	6923      	ldr	r3, [r4, #16]
 8002406:	b94b      	cbnz	r3, 800241c <__swsetup_r+0x7c>
 8002408:	89a3      	ldrh	r3, [r4, #12]
 800240a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800240e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002412:	d003      	beq.n	800241c <__swsetup_r+0x7c>
 8002414:	4621      	mov	r1, r4
 8002416:	4628      	mov	r0, r5
 8002418:	f000 fd37 	bl	8002e8a <__smakebuf_r>
 800241c:	89a0      	ldrh	r0, [r4, #12]
 800241e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002422:	f010 0301 	ands.w	r3, r0, #1
 8002426:	d00a      	beq.n	800243e <__swsetup_r+0x9e>
 8002428:	2300      	movs	r3, #0
 800242a:	60a3      	str	r3, [r4, #8]
 800242c:	6963      	ldr	r3, [r4, #20]
 800242e:	425b      	negs	r3, r3
 8002430:	61a3      	str	r3, [r4, #24]
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	b943      	cbnz	r3, 8002448 <__swsetup_r+0xa8>
 8002436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800243a:	d1c4      	bne.n	80023c6 <__swsetup_r+0x26>
 800243c:	bd38      	pop	{r3, r4, r5, pc}
 800243e:	0781      	lsls	r1, r0, #30
 8002440:	bf58      	it	pl
 8002442:	6963      	ldrpl	r3, [r4, #20]
 8002444:	60a3      	str	r3, [r4, #8]
 8002446:	e7f4      	b.n	8002432 <__swsetup_r+0x92>
 8002448:	2000      	movs	r0, #0
 800244a:	e7f7      	b.n	800243c <__swsetup_r+0x9c>
 800244c:	20000064 	.word	0x20000064

08002450 <memset>:
 8002450:	4603      	mov	r3, r0
 8002452:	4402      	add	r2, r0
 8002454:	4293      	cmp	r3, r2
 8002456:	d100      	bne.n	800245a <memset+0xa>
 8002458:	4770      	bx	lr
 800245a:	f803 1b01 	strb.w	r1, [r3], #1
 800245e:	e7f9      	b.n	8002454 <memset+0x4>

08002460 <_close_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	2300      	movs	r3, #0
 8002464:	4d05      	ldr	r5, [pc, #20]	; (800247c <_close_r+0x1c>)
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	602b      	str	r3, [r5, #0]
 800246c:	f7fe f904 	bl	8000678 <_close>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d102      	bne.n	800247a <_close_r+0x1a>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	b103      	cbz	r3, 800247a <_close_r+0x1a>
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	2000026c 	.word	0x2000026c

08002480 <_lseek_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4604      	mov	r4, r0
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	2200      	movs	r2, #0
 800248a:	4d05      	ldr	r5, [pc, #20]	; (80024a0 <_lseek_r+0x20>)
 800248c:	602a      	str	r2, [r5, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f7fe f916 	bl	80006c0 <_lseek>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_lseek_r+0x1e>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_lseek_r+0x1e>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	2000026c 	.word	0x2000026c

080024a4 <_read_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	4d05      	ldr	r5, [pc, #20]	; (80024c4 <_read_r+0x20>)
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fe f8c3 	bl	800063e <_read>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_read_r+0x1e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_read_r+0x1e>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	2000026c 	.word	0x2000026c

080024c8 <_write_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	2200      	movs	r2, #0
 80024d2:	4d05      	ldr	r5, [pc, #20]	; (80024e8 <_write_r+0x20>)
 80024d4:	602a      	str	r2, [r5, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f7fd fea0 	bl	800021c <_write>
 80024dc:	1c43      	adds	r3, r0, #1
 80024de:	d102      	bne.n	80024e6 <_write_r+0x1e>
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	b103      	cbz	r3, 80024e6 <_write_r+0x1e>
 80024e4:	6023      	str	r3, [r4, #0]
 80024e6:	bd38      	pop	{r3, r4, r5, pc}
 80024e8:	2000026c 	.word	0x2000026c

080024ec <__errno>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <__errno+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000064 	.word	0x20000064

080024f8 <__libc_init_array>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	2600      	movs	r6, #0
 80024fc:	4d0c      	ldr	r5, [pc, #48]	; (8002530 <__libc_init_array+0x38>)
 80024fe:	4c0d      	ldr	r4, [pc, #52]	; (8002534 <__libc_init_array+0x3c>)
 8002500:	1b64      	subs	r4, r4, r5
 8002502:	10a4      	asrs	r4, r4, #2
 8002504:	42a6      	cmp	r6, r4
 8002506:	d109      	bne.n	800251c <__libc_init_array+0x24>
 8002508:	f000 fd3c 	bl	8002f84 <_init>
 800250c:	2600      	movs	r6, #0
 800250e:	4d0a      	ldr	r5, [pc, #40]	; (8002538 <__libc_init_array+0x40>)
 8002510:	4c0a      	ldr	r4, [pc, #40]	; (800253c <__libc_init_array+0x44>)
 8002512:	1b64      	subs	r4, r4, r5
 8002514:	10a4      	asrs	r4, r4, #2
 8002516:	42a6      	cmp	r6, r4
 8002518:	d105      	bne.n	8002526 <__libc_init_array+0x2e>
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002520:	4798      	blx	r3
 8002522:	3601      	adds	r6, #1
 8002524:	e7ee      	b.n	8002504 <__libc_init_array+0xc>
 8002526:	f855 3b04 	ldr.w	r3, [r5], #4
 800252a:	4798      	blx	r3
 800252c:	3601      	adds	r6, #1
 800252e:	e7f2      	b.n	8002516 <__libc_init_array+0x1e>
 8002530:	08003058 	.word	0x08003058
 8002534:	08003058 	.word	0x08003058
 8002538:	08003058 	.word	0x08003058
 800253c:	0800305c 	.word	0x0800305c

08002540 <__retarget_lock_init_recursive>:
 8002540:	4770      	bx	lr

08002542 <__retarget_lock_acquire_recursive>:
 8002542:	4770      	bx	lr

08002544 <__retarget_lock_release_recursive>:
 8002544:	4770      	bx	lr
	...

08002548 <_free_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4605      	mov	r5, r0
 800254c:	2900      	cmp	r1, #0
 800254e:	d040      	beq.n	80025d2 <_free_r+0x8a>
 8002550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002554:	1f0c      	subs	r4, r1, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	bfb8      	it	lt
 800255a:	18e4      	addlt	r4, r4, r3
 800255c:	f000 f8e4 	bl	8002728 <__malloc_lock>
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <_free_r+0x8c>)
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	b933      	cbnz	r3, 8002574 <_free_r+0x2c>
 8002566:	6063      	str	r3, [r4, #4]
 8002568:	6014      	str	r4, [r2, #0]
 800256a:	4628      	mov	r0, r5
 800256c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002570:	f000 b8e0 	b.w	8002734 <__malloc_unlock>
 8002574:	42a3      	cmp	r3, r4
 8002576:	d908      	bls.n	800258a <_free_r+0x42>
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	1821      	adds	r1, r4, r0
 800257c:	428b      	cmp	r3, r1
 800257e:	bf01      	itttt	eq
 8002580:	6819      	ldreq	r1, [r3, #0]
 8002582:	685b      	ldreq	r3, [r3, #4]
 8002584:	1809      	addeq	r1, r1, r0
 8002586:	6021      	streq	r1, [r4, #0]
 8002588:	e7ed      	b.n	8002566 <_free_r+0x1e>
 800258a:	461a      	mov	r2, r3
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	b10b      	cbz	r3, 8002594 <_free_r+0x4c>
 8002590:	42a3      	cmp	r3, r4
 8002592:	d9fa      	bls.n	800258a <_free_r+0x42>
 8002594:	6811      	ldr	r1, [r2, #0]
 8002596:	1850      	adds	r0, r2, r1
 8002598:	42a0      	cmp	r0, r4
 800259a:	d10b      	bne.n	80025b4 <_free_r+0x6c>
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	4401      	add	r1, r0
 80025a0:	1850      	adds	r0, r2, r1
 80025a2:	4283      	cmp	r3, r0
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	d1e0      	bne.n	800256a <_free_r+0x22>
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4408      	add	r0, r1
 80025ae:	6010      	str	r0, [r2, #0]
 80025b0:	6053      	str	r3, [r2, #4]
 80025b2:	e7da      	b.n	800256a <_free_r+0x22>
 80025b4:	d902      	bls.n	80025bc <_free_r+0x74>
 80025b6:	230c      	movs	r3, #12
 80025b8:	602b      	str	r3, [r5, #0]
 80025ba:	e7d6      	b.n	800256a <_free_r+0x22>
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	1821      	adds	r1, r4, r0
 80025c0:	428b      	cmp	r3, r1
 80025c2:	bf01      	itttt	eq
 80025c4:	6819      	ldreq	r1, [r3, #0]
 80025c6:	685b      	ldreq	r3, [r3, #4]
 80025c8:	1809      	addeq	r1, r1, r0
 80025ca:	6021      	streq	r1, [r4, #0]
 80025cc:	6063      	str	r3, [r4, #4]
 80025ce:	6054      	str	r4, [r2, #4]
 80025d0:	e7cb      	b.n	800256a <_free_r+0x22>
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	20000274 	.word	0x20000274

080025d8 <malloc>:
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <malloc+0xc>)
 80025da:	4601      	mov	r1, r0
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f000 b823 	b.w	8002628 <_malloc_r>
 80025e2:	bf00      	nop
 80025e4:	20000064 	.word	0x20000064

080025e8 <sbrk_aligned>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	4e0e      	ldr	r6, [pc, #56]	; (8002624 <sbrk_aligned+0x3c>)
 80025ec:	460c      	mov	r4, r1
 80025ee:	6831      	ldr	r1, [r6, #0]
 80025f0:	4605      	mov	r5, r0
 80025f2:	b911      	cbnz	r1, 80025fa <sbrk_aligned+0x12>
 80025f4:	f000 fca8 	bl	8002f48 <_sbrk_r>
 80025f8:	6030      	str	r0, [r6, #0]
 80025fa:	4621      	mov	r1, r4
 80025fc:	4628      	mov	r0, r5
 80025fe:	f000 fca3 	bl	8002f48 <_sbrk_r>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d00a      	beq.n	800261c <sbrk_aligned+0x34>
 8002606:	1cc4      	adds	r4, r0, #3
 8002608:	f024 0403 	bic.w	r4, r4, #3
 800260c:	42a0      	cmp	r0, r4
 800260e:	d007      	beq.n	8002620 <sbrk_aligned+0x38>
 8002610:	1a21      	subs	r1, r4, r0
 8002612:	4628      	mov	r0, r5
 8002614:	f000 fc98 	bl	8002f48 <_sbrk_r>
 8002618:	3001      	adds	r0, #1
 800261a:	d101      	bne.n	8002620 <sbrk_aligned+0x38>
 800261c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002620:	4620      	mov	r0, r4
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	20000278 	.word	0x20000278

08002628 <_malloc_r>:
 8002628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800262c:	1ccd      	adds	r5, r1, #3
 800262e:	f025 0503 	bic.w	r5, r5, #3
 8002632:	3508      	adds	r5, #8
 8002634:	2d0c      	cmp	r5, #12
 8002636:	bf38      	it	cc
 8002638:	250c      	movcc	r5, #12
 800263a:	2d00      	cmp	r5, #0
 800263c:	4607      	mov	r7, r0
 800263e:	db01      	blt.n	8002644 <_malloc_r+0x1c>
 8002640:	42a9      	cmp	r1, r5
 8002642:	d905      	bls.n	8002650 <_malloc_r+0x28>
 8002644:	230c      	movs	r3, #12
 8002646:	2600      	movs	r6, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4630      	mov	r0, r6
 800264c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002650:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002724 <_malloc_r+0xfc>
 8002654:	f000 f868 	bl	8002728 <__malloc_lock>
 8002658:	f8d8 3000 	ldr.w	r3, [r8]
 800265c:	461c      	mov	r4, r3
 800265e:	bb5c      	cbnz	r4, 80026b8 <_malloc_r+0x90>
 8002660:	4629      	mov	r1, r5
 8002662:	4638      	mov	r0, r7
 8002664:	f7ff ffc0 	bl	80025e8 <sbrk_aligned>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	4604      	mov	r4, r0
 800266c:	d155      	bne.n	800271a <_malloc_r+0xf2>
 800266e:	f8d8 4000 	ldr.w	r4, [r8]
 8002672:	4626      	mov	r6, r4
 8002674:	2e00      	cmp	r6, #0
 8002676:	d145      	bne.n	8002704 <_malloc_r+0xdc>
 8002678:	2c00      	cmp	r4, #0
 800267a:	d048      	beq.n	800270e <_malloc_r+0xe6>
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	4631      	mov	r1, r6
 8002680:	4638      	mov	r0, r7
 8002682:	eb04 0903 	add.w	r9, r4, r3
 8002686:	f000 fc5f 	bl	8002f48 <_sbrk_r>
 800268a:	4581      	cmp	r9, r0
 800268c:	d13f      	bne.n	800270e <_malloc_r+0xe6>
 800268e:	6821      	ldr	r1, [r4, #0]
 8002690:	4638      	mov	r0, r7
 8002692:	1a6d      	subs	r5, r5, r1
 8002694:	4629      	mov	r1, r5
 8002696:	f7ff ffa7 	bl	80025e8 <sbrk_aligned>
 800269a:	3001      	adds	r0, #1
 800269c:	d037      	beq.n	800270e <_malloc_r+0xe6>
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	442b      	add	r3, r5
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	f8d8 3000 	ldr.w	r3, [r8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d038      	beq.n	800271e <_malloc_r+0xf6>
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	42a2      	cmp	r2, r4
 80026b0:	d12b      	bne.n	800270a <_malloc_r+0xe2>
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	e00f      	b.n	80026d8 <_malloc_r+0xb0>
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	1b52      	subs	r2, r2, r5
 80026bc:	d41f      	bmi.n	80026fe <_malloc_r+0xd6>
 80026be:	2a0b      	cmp	r2, #11
 80026c0:	d917      	bls.n	80026f2 <_malloc_r+0xca>
 80026c2:	1961      	adds	r1, r4, r5
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	6025      	str	r5, [r4, #0]
 80026c8:	bf18      	it	ne
 80026ca:	6059      	strne	r1, [r3, #4]
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	bf08      	it	eq
 80026d0:	f8c8 1000 	streq.w	r1, [r8]
 80026d4:	5162      	str	r2, [r4, r5]
 80026d6:	604b      	str	r3, [r1, #4]
 80026d8:	4638      	mov	r0, r7
 80026da:	f104 060b 	add.w	r6, r4, #11
 80026de:	f000 f829 	bl	8002734 <__malloc_unlock>
 80026e2:	f026 0607 	bic.w	r6, r6, #7
 80026e6:	1d23      	adds	r3, r4, #4
 80026e8:	1af2      	subs	r2, r6, r3
 80026ea:	d0ae      	beq.n	800264a <_malloc_r+0x22>
 80026ec:	1b9b      	subs	r3, r3, r6
 80026ee:	50a3      	str	r3, [r4, r2]
 80026f0:	e7ab      	b.n	800264a <_malloc_r+0x22>
 80026f2:	42a3      	cmp	r3, r4
 80026f4:	6862      	ldr	r2, [r4, #4]
 80026f6:	d1dd      	bne.n	80026b4 <_malloc_r+0x8c>
 80026f8:	f8c8 2000 	str.w	r2, [r8]
 80026fc:	e7ec      	b.n	80026d8 <_malloc_r+0xb0>
 80026fe:	4623      	mov	r3, r4
 8002700:	6864      	ldr	r4, [r4, #4]
 8002702:	e7ac      	b.n	800265e <_malloc_r+0x36>
 8002704:	4634      	mov	r4, r6
 8002706:	6876      	ldr	r6, [r6, #4]
 8002708:	e7b4      	b.n	8002674 <_malloc_r+0x4c>
 800270a:	4613      	mov	r3, r2
 800270c:	e7cc      	b.n	80026a8 <_malloc_r+0x80>
 800270e:	230c      	movs	r3, #12
 8002710:	4638      	mov	r0, r7
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	f000 f80e 	bl	8002734 <__malloc_unlock>
 8002718:	e797      	b.n	800264a <_malloc_r+0x22>
 800271a:	6025      	str	r5, [r4, #0]
 800271c:	e7dc      	b.n	80026d8 <_malloc_r+0xb0>
 800271e:	605b      	str	r3, [r3, #4]
 8002720:	deff      	udf	#255	; 0xff
 8002722:	bf00      	nop
 8002724:	20000274 	.word	0x20000274

08002728 <__malloc_lock>:
 8002728:	4801      	ldr	r0, [pc, #4]	; (8002730 <__malloc_lock+0x8>)
 800272a:	f7ff bf0a 	b.w	8002542 <__retarget_lock_acquire_recursive>
 800272e:	bf00      	nop
 8002730:	20000270 	.word	0x20000270

08002734 <__malloc_unlock>:
 8002734:	4801      	ldr	r0, [pc, #4]	; (800273c <__malloc_unlock+0x8>)
 8002736:	f7ff bf05 	b.w	8002544 <__retarget_lock_release_recursive>
 800273a:	bf00      	nop
 800273c:	20000270 	.word	0x20000270

08002740 <__sfputc_r>:
 8002740:	6893      	ldr	r3, [r2, #8]
 8002742:	b410      	push	{r4}
 8002744:	3b01      	subs	r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	6093      	str	r3, [r2, #8]
 800274a:	da07      	bge.n	800275c <__sfputc_r+0x1c>
 800274c:	6994      	ldr	r4, [r2, #24]
 800274e:	42a3      	cmp	r3, r4
 8002750:	db01      	blt.n	8002756 <__sfputc_r+0x16>
 8002752:	290a      	cmp	r1, #10
 8002754:	d102      	bne.n	800275c <__sfputc_r+0x1c>
 8002756:	bc10      	pop	{r4}
 8002758:	f7ff bde5 	b.w	8002326 <__swbuf_r>
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	1c58      	adds	r0, r3, #1
 8002760:	6010      	str	r0, [r2, #0]
 8002762:	7019      	strb	r1, [r3, #0]
 8002764:	4608      	mov	r0, r1
 8002766:	bc10      	pop	{r4}
 8002768:	4770      	bx	lr

0800276a <__sfputs_r>:
 800276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276c:	4606      	mov	r6, r0
 800276e:	460f      	mov	r7, r1
 8002770:	4614      	mov	r4, r2
 8002772:	18d5      	adds	r5, r2, r3
 8002774:	42ac      	cmp	r4, r5
 8002776:	d101      	bne.n	800277c <__sfputs_r+0x12>
 8002778:	2000      	movs	r0, #0
 800277a:	e007      	b.n	800278c <__sfputs_r+0x22>
 800277c:	463a      	mov	r2, r7
 800277e:	4630      	mov	r0, r6
 8002780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002784:	f7ff ffdc 	bl	8002740 <__sfputc_r>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d1f3      	bne.n	8002774 <__sfputs_r+0xa>
 800278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002790 <_vfiprintf_r>:
 8002790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	460d      	mov	r5, r1
 8002796:	4614      	mov	r4, r2
 8002798:	4698      	mov	r8, r3
 800279a:	4606      	mov	r6, r0
 800279c:	b09d      	sub	sp, #116	; 0x74
 800279e:	b118      	cbz	r0, 80027a8 <_vfiprintf_r+0x18>
 80027a0:	6a03      	ldr	r3, [r0, #32]
 80027a2:	b90b      	cbnz	r3, 80027a8 <_vfiprintf_r+0x18>
 80027a4:	f7ff fc22 	bl	8001fec <__sinit>
 80027a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027aa:	07d9      	lsls	r1, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_vfiprintf_r+0x2a>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_vfiprintf_r+0x2a>
 80027b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027b6:	f7ff fec4 	bl	8002542 <__retarget_lock_acquire_recursive>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	d501      	bpl.n	80027c4 <_vfiprintf_r+0x34>
 80027c0:	692b      	ldr	r3, [r5, #16]
 80027c2:	b99b      	cbnz	r3, 80027ec <_vfiprintf_r+0x5c>
 80027c4:	4629      	mov	r1, r5
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff fdea 	bl	80023a0 <__swsetup_r>
 80027cc:	b170      	cbz	r0, 80027ec <_vfiprintf_r+0x5c>
 80027ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027d0:	07dc      	lsls	r4, r3, #31
 80027d2:	d504      	bpl.n	80027de <_vfiprintf_r+0x4e>
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d8:	b01d      	add	sp, #116	; 0x74
 80027da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	0598      	lsls	r0, r3, #22
 80027e2:	d4f7      	bmi.n	80027d4 <_vfiprintf_r+0x44>
 80027e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027e6:	f7ff fead 	bl	8002544 <__retarget_lock_release_recursive>
 80027ea:	e7f3      	b.n	80027d4 <_vfiprintf_r+0x44>
 80027ec:	2300      	movs	r3, #0
 80027ee:	9309      	str	r3, [sp, #36]	; 0x24
 80027f0:	2320      	movs	r3, #32
 80027f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027f6:	2330      	movs	r3, #48	; 0x30
 80027f8:	f04f 0901 	mov.w	r9, #1
 80027fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002800:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80029b0 <_vfiprintf_r+0x220>
 8002804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002808:	4623      	mov	r3, r4
 800280a:	469a      	mov	sl, r3
 800280c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002810:	b10a      	cbz	r2, 8002816 <_vfiprintf_r+0x86>
 8002812:	2a25      	cmp	r2, #37	; 0x25
 8002814:	d1f9      	bne.n	800280a <_vfiprintf_r+0x7a>
 8002816:	ebba 0b04 	subs.w	fp, sl, r4
 800281a:	d00b      	beq.n	8002834 <_vfiprintf_r+0xa4>
 800281c:	465b      	mov	r3, fp
 800281e:	4622      	mov	r2, r4
 8002820:	4629      	mov	r1, r5
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff ffa1 	bl	800276a <__sfputs_r>
 8002828:	3001      	adds	r0, #1
 800282a:	f000 80a9 	beq.w	8002980 <_vfiprintf_r+0x1f0>
 800282e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002830:	445a      	add	r2, fp
 8002832:	9209      	str	r2, [sp, #36]	; 0x24
 8002834:	f89a 3000 	ldrb.w	r3, [sl]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a1 	beq.w	8002980 <_vfiprintf_r+0x1f0>
 800283e:	2300      	movs	r3, #0
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002848:	f10a 0a01 	add.w	sl, sl, #1
 800284c:	9304      	str	r3, [sp, #16]
 800284e:	9307      	str	r3, [sp, #28]
 8002850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002854:	931a      	str	r3, [sp, #104]	; 0x68
 8002856:	4654      	mov	r4, sl
 8002858:	2205      	movs	r2, #5
 800285a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800285e:	4854      	ldr	r0, [pc, #336]	; (80029b0 <_vfiprintf_r+0x220>)
 8002860:	f000 fb82 	bl	8002f68 <memchr>
 8002864:	9a04      	ldr	r2, [sp, #16]
 8002866:	b9d8      	cbnz	r0, 80028a0 <_vfiprintf_r+0x110>
 8002868:	06d1      	lsls	r1, r2, #27
 800286a:	bf44      	itt	mi
 800286c:	2320      	movmi	r3, #32
 800286e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002872:	0713      	lsls	r3, r2, #28
 8002874:	bf44      	itt	mi
 8002876:	232b      	movmi	r3, #43	; 0x2b
 8002878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800287c:	f89a 3000 	ldrb.w	r3, [sl]
 8002880:	2b2a      	cmp	r3, #42	; 0x2a
 8002882:	d015      	beq.n	80028b0 <_vfiprintf_r+0x120>
 8002884:	4654      	mov	r4, sl
 8002886:	2000      	movs	r0, #0
 8002888:	f04f 0c0a 	mov.w	ip, #10
 800288c:	9a07      	ldr	r2, [sp, #28]
 800288e:	4621      	mov	r1, r4
 8002890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002894:	3b30      	subs	r3, #48	; 0x30
 8002896:	2b09      	cmp	r3, #9
 8002898:	d94d      	bls.n	8002936 <_vfiprintf_r+0x1a6>
 800289a:	b1b0      	cbz	r0, 80028ca <_vfiprintf_r+0x13a>
 800289c:	9207      	str	r2, [sp, #28]
 800289e:	e014      	b.n	80028ca <_vfiprintf_r+0x13a>
 80028a0:	eba0 0308 	sub.w	r3, r0, r8
 80028a4:	fa09 f303 	lsl.w	r3, r9, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	46a2      	mov	sl, r4
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	e7d2      	b.n	8002856 <_vfiprintf_r+0xc6>
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	1d19      	adds	r1, r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	9103      	str	r1, [sp, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bfbb      	ittet	lt
 80028bc:	425b      	neglt	r3, r3
 80028be:	f042 0202 	orrlt.w	r2, r2, #2
 80028c2:	9307      	strge	r3, [sp, #28]
 80028c4:	9307      	strlt	r3, [sp, #28]
 80028c6:	bfb8      	it	lt
 80028c8:	9204      	strlt	r2, [sp, #16]
 80028ca:	7823      	ldrb	r3, [r4, #0]
 80028cc:	2b2e      	cmp	r3, #46	; 0x2e
 80028ce:	d10c      	bne.n	80028ea <_vfiprintf_r+0x15a>
 80028d0:	7863      	ldrb	r3, [r4, #1]
 80028d2:	2b2a      	cmp	r3, #42	; 0x2a
 80028d4:	d134      	bne.n	8002940 <_vfiprintf_r+0x1b0>
 80028d6:	9b03      	ldr	r3, [sp, #12]
 80028d8:	3402      	adds	r4, #2
 80028da:	1d1a      	adds	r2, r3, #4
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	9203      	str	r2, [sp, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bfb8      	it	lt
 80028e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029b4 <_vfiprintf_r+0x224>
 80028ee:	2203      	movs	r2, #3
 80028f0:	4650      	mov	r0, sl
 80028f2:	7821      	ldrb	r1, [r4, #0]
 80028f4:	f000 fb38 	bl	8002f68 <memchr>
 80028f8:	b138      	cbz	r0, 800290a <_vfiprintf_r+0x17a>
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	9b04      	ldr	r3, [sp, #16]
 80028fe:	eba0 000a 	sub.w	r0, r0, sl
 8002902:	4082      	lsls	r2, r0
 8002904:	4313      	orrs	r3, r2
 8002906:	3401      	adds	r4, #1
 8002908:	9304      	str	r3, [sp, #16]
 800290a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800290e:	2206      	movs	r2, #6
 8002910:	4829      	ldr	r0, [pc, #164]	; (80029b8 <_vfiprintf_r+0x228>)
 8002912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002916:	f000 fb27 	bl	8002f68 <memchr>
 800291a:	2800      	cmp	r0, #0
 800291c:	d03f      	beq.n	800299e <_vfiprintf_r+0x20e>
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <_vfiprintf_r+0x22c>)
 8002920:	bb1b      	cbnz	r3, 800296a <_vfiprintf_r+0x1da>
 8002922:	9b03      	ldr	r3, [sp, #12]
 8002924:	3307      	adds	r3, #7
 8002926:	f023 0307 	bic.w	r3, r3, #7
 800292a:	3308      	adds	r3, #8
 800292c:	9303      	str	r3, [sp, #12]
 800292e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002930:	443b      	add	r3, r7
 8002932:	9309      	str	r3, [sp, #36]	; 0x24
 8002934:	e768      	b.n	8002808 <_vfiprintf_r+0x78>
 8002936:	460c      	mov	r4, r1
 8002938:	2001      	movs	r0, #1
 800293a:	fb0c 3202 	mla	r2, ip, r2, r3
 800293e:	e7a6      	b.n	800288e <_vfiprintf_r+0xfe>
 8002940:	2300      	movs	r3, #0
 8002942:	f04f 0c0a 	mov.w	ip, #10
 8002946:	4619      	mov	r1, r3
 8002948:	3401      	adds	r4, #1
 800294a:	9305      	str	r3, [sp, #20]
 800294c:	4620      	mov	r0, r4
 800294e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002952:	3a30      	subs	r2, #48	; 0x30
 8002954:	2a09      	cmp	r2, #9
 8002956:	d903      	bls.n	8002960 <_vfiprintf_r+0x1d0>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0c6      	beq.n	80028ea <_vfiprintf_r+0x15a>
 800295c:	9105      	str	r1, [sp, #20]
 800295e:	e7c4      	b.n	80028ea <_vfiprintf_r+0x15a>
 8002960:	4604      	mov	r4, r0
 8002962:	2301      	movs	r3, #1
 8002964:	fb0c 2101 	mla	r1, ip, r1, r2
 8002968:	e7f0      	b.n	800294c <_vfiprintf_r+0x1bc>
 800296a:	ab03      	add	r3, sp, #12
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	462a      	mov	r2, r5
 8002970:	4630      	mov	r0, r6
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <_vfiprintf_r+0x230>)
 8002974:	a904      	add	r1, sp, #16
 8002976:	f3af 8000 	nop.w
 800297a:	4607      	mov	r7, r0
 800297c:	1c78      	adds	r0, r7, #1
 800297e:	d1d6      	bne.n	800292e <_vfiprintf_r+0x19e>
 8002980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002982:	07d9      	lsls	r1, r3, #31
 8002984:	d405      	bmi.n	8002992 <_vfiprintf_r+0x202>
 8002986:	89ab      	ldrh	r3, [r5, #12]
 8002988:	059a      	lsls	r2, r3, #22
 800298a:	d402      	bmi.n	8002992 <_vfiprintf_r+0x202>
 800298c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800298e:	f7ff fdd9 	bl	8002544 <__retarget_lock_release_recursive>
 8002992:	89ab      	ldrh	r3, [r5, #12]
 8002994:	065b      	lsls	r3, r3, #25
 8002996:	f53f af1d 	bmi.w	80027d4 <_vfiprintf_r+0x44>
 800299a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800299c:	e71c      	b.n	80027d8 <_vfiprintf_r+0x48>
 800299e:	ab03      	add	r3, sp, #12
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	462a      	mov	r2, r5
 80029a4:	4630      	mov	r0, r6
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <_vfiprintf_r+0x230>)
 80029a8:	a904      	add	r1, sp, #16
 80029aa:	f000 f87d 	bl	8002aa8 <_printf_i>
 80029ae:	e7e4      	b.n	800297a <_vfiprintf_r+0x1ea>
 80029b0:	08003022 	.word	0x08003022
 80029b4:	08003028 	.word	0x08003028
 80029b8:	0800302c 	.word	0x0800302c
 80029bc:	00000000 	.word	0x00000000
 80029c0:	0800276b 	.word	0x0800276b

080029c4 <_printf_common>:
 80029c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c8:	4616      	mov	r6, r2
 80029ca:	4699      	mov	r9, r3
 80029cc:	688a      	ldr	r2, [r1, #8]
 80029ce:	690b      	ldr	r3, [r1, #16]
 80029d0:	4607      	mov	r7, r0
 80029d2:	4293      	cmp	r3, r2
 80029d4:	bfb8      	it	lt
 80029d6:	4613      	movlt	r3, r2
 80029d8:	6033      	str	r3, [r6, #0]
 80029da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029de:	460c      	mov	r4, r1
 80029e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e4:	b10a      	cbz	r2, 80029ea <_printf_common+0x26>
 80029e6:	3301      	adds	r3, #1
 80029e8:	6033      	str	r3, [r6, #0]
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	0699      	lsls	r1, r3, #26
 80029ee:	bf42      	ittt	mi
 80029f0:	6833      	ldrmi	r3, [r6, #0]
 80029f2:	3302      	addmi	r3, #2
 80029f4:	6033      	strmi	r3, [r6, #0]
 80029f6:	6825      	ldr	r5, [r4, #0]
 80029f8:	f015 0506 	ands.w	r5, r5, #6
 80029fc:	d106      	bne.n	8002a0c <_printf_common+0x48>
 80029fe:	f104 0a19 	add.w	sl, r4, #25
 8002a02:	68e3      	ldr	r3, [r4, #12]
 8002a04:	6832      	ldr	r2, [r6, #0]
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	42ab      	cmp	r3, r5
 8002a0a:	dc2b      	bgt.n	8002a64 <_printf_common+0xa0>
 8002a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a10:	1e13      	subs	r3, r2, #0
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	bf18      	it	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	0692      	lsls	r2, r2, #26
 8002a1a:	d430      	bmi.n	8002a7e <_printf_common+0xba>
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	4638      	mov	r0, r7
 8002a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a24:	47c0      	blx	r8
 8002a26:	3001      	adds	r0, #1
 8002a28:	d023      	beq.n	8002a72 <_printf_common+0xae>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	6922      	ldr	r2, [r4, #16]
 8002a2e:	f003 0306 	and.w	r3, r3, #6
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf14      	ite	ne
 8002a36:	2500      	movne	r5, #0
 8002a38:	6833      	ldreq	r3, [r6, #0]
 8002a3a:	f04f 0600 	mov.w	r6, #0
 8002a3e:	bf08      	it	eq
 8002a40:	68e5      	ldreq	r5, [r4, #12]
 8002a42:	f104 041a 	add.w	r4, r4, #26
 8002a46:	bf08      	it	eq
 8002a48:	1aed      	subeq	r5, r5, r3
 8002a4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a4e:	bf08      	it	eq
 8002a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bfc4      	itt	gt
 8002a58:	1a9b      	subgt	r3, r3, r2
 8002a5a:	18ed      	addgt	r5, r5, r3
 8002a5c:	42b5      	cmp	r5, r6
 8002a5e:	d11a      	bne.n	8002a96 <_printf_common+0xd2>
 8002a60:	2000      	movs	r0, #0
 8002a62:	e008      	b.n	8002a76 <_printf_common+0xb2>
 8002a64:	2301      	movs	r3, #1
 8002a66:	4652      	mov	r2, sl
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	47c0      	blx	r8
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d103      	bne.n	8002a7a <_printf_common+0xb6>
 8002a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7a:	3501      	adds	r5, #1
 8002a7c:	e7c1      	b.n	8002a02 <_printf_common+0x3e>
 8002a7e:	2030      	movs	r0, #48	; 0x30
 8002a80:	18e1      	adds	r1, r4, r3
 8002a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a8c:	4422      	add	r2, r4
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a94:	e7c2      	b.n	8002a1c <_printf_common+0x58>
 8002a96:	2301      	movs	r3, #1
 8002a98:	4622      	mov	r2, r4
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	47c0      	blx	r8
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	d0e6      	beq.n	8002a72 <_printf_common+0xae>
 8002aa4:	3601      	adds	r6, #1
 8002aa6:	e7d9      	b.n	8002a5c <_printf_common+0x98>

08002aa8 <_printf_i>:
 8002aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	7e0f      	ldrb	r7, [r1, #24]
 8002aae:	4691      	mov	r9, r2
 8002ab0:	2f78      	cmp	r7, #120	; 0x78
 8002ab2:	4680      	mov	r8, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002abe:	d807      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ac0:	2f62      	cmp	r7, #98	; 0x62
 8002ac2:	d80a      	bhi.n	8002ada <_printf_i+0x32>
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	f000 80d5 	beq.w	8002c74 <_printf_i+0x1cc>
 8002aca:	2f58      	cmp	r7, #88	; 0x58
 8002acc:	f000 80c1 	beq.w	8002c52 <_printf_i+0x1aa>
 8002ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ad8:	e03a      	b.n	8002b50 <_printf_i+0xa8>
 8002ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ade:	2b15      	cmp	r3, #21
 8002ae0:	d8f6      	bhi.n	8002ad0 <_printf_i+0x28>
 8002ae2:	a101      	add	r1, pc, #4	; (adr r1, 8002ae8 <_printf_i+0x40>)
 8002ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ae8:	08002b41 	.word	0x08002b41
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002ad1 	.word	0x08002ad1
 8002af4:	08002ad1 	.word	0x08002ad1
 8002af8:	08002ad1 	.word	0x08002ad1
 8002afc:	08002ad1 	.word	0x08002ad1
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002ad1 	.word	0x08002ad1
 8002b08:	08002ad1 	.word	0x08002ad1
 8002b0c:	08002ad1 	.word	0x08002ad1
 8002b10:	08002ad1 	.word	0x08002ad1
 8002b14:	08002c5b 	.word	0x08002c5b
 8002b18:	08002b81 	.word	0x08002b81
 8002b1c:	08002c15 	.word	0x08002c15
 8002b20:	08002ad1 	.word	0x08002ad1
 8002b24:	08002ad1 	.word	0x08002ad1
 8002b28:	08002c7d 	.word	0x08002c7d
 8002b2c:	08002ad1 	.word	0x08002ad1
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002ad1 	.word	0x08002ad1
 8002b38:	08002ad1 	.word	0x08002ad1
 8002b3c:	08002c1d 	.word	0x08002c1d
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	602a      	str	r2, [r5, #0]
 8002b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0a0      	b.n	8002c96 <_printf_i+0x1ee>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	0607      	lsls	r7, r0, #24
 8002b5a:	f103 0104 	add.w	r1, r3, #4
 8002b5e:	6029      	str	r1, [r5, #0]
 8002b60:	d501      	bpl.n	8002b66 <_printf_i+0xbe>
 8002b62:	681e      	ldr	r6, [r3, #0]
 8002b64:	e003      	b.n	8002b6e <_printf_i+0xc6>
 8002b66:	0646      	lsls	r6, r0, #25
 8002b68:	d5fb      	bpl.n	8002b62 <_printf_i+0xba>
 8002b6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	da03      	bge.n	8002b7a <_printf_i+0xd2>
 8002b72:	232d      	movs	r3, #45	; 0x2d
 8002b74:	4276      	negs	r6, r6
 8002b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	4859      	ldr	r0, [pc, #356]	; (8002ce4 <_printf_i+0x23c>)
 8002b7e:	e012      	b.n	8002ba6 <_printf_i+0xfe>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	1d19      	adds	r1, r3, #4
 8002b86:	6029      	str	r1, [r5, #0]
 8002b88:	0605      	lsls	r5, r0, #24
 8002b8a:	d501      	bpl.n	8002b90 <_printf_i+0xe8>
 8002b8c:	681e      	ldr	r6, [r3, #0]
 8002b8e:	e002      	b.n	8002b96 <_printf_i+0xee>
 8002b90:	0641      	lsls	r1, r0, #25
 8002b92:	d5fb      	bpl.n	8002b8c <_printf_i+0xe4>
 8002b94:	881e      	ldrh	r6, [r3, #0]
 8002b96:	2f6f      	cmp	r7, #111	; 0x6f
 8002b98:	bf0c      	ite	eq
 8002b9a:	2308      	moveq	r3, #8
 8002b9c:	230a      	movne	r3, #10
 8002b9e:	4851      	ldr	r0, [pc, #324]	; (8002ce4 <_printf_i+0x23c>)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ba6:	6865      	ldr	r5, [r4, #4]
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	bfa8      	it	ge
 8002bac:	6821      	ldrge	r1, [r4, #0]
 8002bae:	60a5      	str	r5, [r4, #8]
 8002bb0:	bfa4      	itt	ge
 8002bb2:	f021 0104 	bicge.w	r1, r1, #4
 8002bb6:	6021      	strge	r1, [r4, #0]
 8002bb8:	b90e      	cbnz	r6, 8002bbe <_printf_i+0x116>
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	d04b      	beq.n	8002c56 <_printf_i+0x1ae>
 8002bbe:	4615      	mov	r5, r2
 8002bc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bc4:	fb03 6711 	mls	r7, r3, r1, r6
 8002bc8:	5dc7      	ldrb	r7, [r0, r7]
 8002bca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bce:	4637      	mov	r7, r6
 8002bd0:	42bb      	cmp	r3, r7
 8002bd2:	460e      	mov	r6, r1
 8002bd4:	d9f4      	bls.n	8002bc0 <_printf_i+0x118>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d10b      	bne.n	8002bf2 <_printf_i+0x14a>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	07de      	lsls	r6, r3, #31
 8002bde:	d508      	bpl.n	8002bf2 <_printf_i+0x14a>
 8002be0:	6923      	ldr	r3, [r4, #16]
 8002be2:	6861      	ldr	r1, [r4, #4]
 8002be4:	4299      	cmp	r1, r3
 8002be6:	bfde      	ittt	le
 8002be8:	2330      	movle	r3, #48	; 0x30
 8002bea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bf2:	1b52      	subs	r2, r2, r5
 8002bf4:	6122      	str	r2, [r4, #16]
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	f8cd a000 	str.w	sl, [sp]
 8002c00:	aa03      	add	r2, sp, #12
 8002c02:	f7ff fedf 	bl	80029c4 <_printf_common>
 8002c06:	3001      	adds	r0, #1
 8002c08:	d14a      	bne.n	8002ca0 <_printf_i+0x1f8>
 8002c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c0e:	b004      	add	sp, #16
 8002c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	2778      	movs	r7, #120	; 0x78
 8002c1e:	4832      	ldr	r0, [pc, #200]	; (8002ce8 <_printf_i+0x240>)
 8002c20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	6829      	ldr	r1, [r5, #0]
 8002c28:	061f      	lsls	r7, r3, #24
 8002c2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c2e:	d402      	bmi.n	8002c36 <_printf_i+0x18e>
 8002c30:	065f      	lsls	r7, r3, #25
 8002c32:	bf48      	it	mi
 8002c34:	b2b6      	uxthmi	r6, r6
 8002c36:	07df      	lsls	r7, r3, #31
 8002c38:	bf48      	it	mi
 8002c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c3e:	6029      	str	r1, [r5, #0]
 8002c40:	bf48      	it	mi
 8002c42:	6023      	strmi	r3, [r4, #0]
 8002c44:	b91e      	cbnz	r6, 8002c4e <_printf_i+0x1a6>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f023 0320 	bic.w	r3, r3, #32
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e7a6      	b.n	8002ba0 <_printf_i+0xf8>
 8002c52:	4824      	ldr	r0, [pc, #144]	; (8002ce4 <_printf_i+0x23c>)
 8002c54:	e7e4      	b.n	8002c20 <_printf_i+0x178>
 8002c56:	4615      	mov	r5, r2
 8002c58:	e7bd      	b.n	8002bd6 <_printf_i+0x12e>
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	6826      	ldr	r6, [r4, #0]
 8002c5e:	1d18      	adds	r0, r3, #4
 8002c60:	6961      	ldr	r1, [r4, #20]
 8002c62:	6028      	str	r0, [r5, #0]
 8002c64:	0635      	lsls	r5, r6, #24
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	d501      	bpl.n	8002c6e <_printf_i+0x1c6>
 8002c6a:	6019      	str	r1, [r3, #0]
 8002c6c:	e002      	b.n	8002c74 <_printf_i+0x1cc>
 8002c6e:	0670      	lsls	r0, r6, #25
 8002c70:	d5fb      	bpl.n	8002c6a <_printf_i+0x1c2>
 8002c72:	8019      	strh	r1, [r3, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	4615      	mov	r5, r2
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	e7bc      	b.n	8002bf6 <_printf_i+0x14e>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	1d1a      	adds	r2, r3, #4
 8002c82:	602a      	str	r2, [r5, #0]
 8002c84:	681d      	ldr	r5, [r3, #0]
 8002c86:	6862      	ldr	r2, [r4, #4]
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f000 f96d 	bl	8002f68 <memchr>
 8002c8e:	b108      	cbz	r0, 8002c94 <_printf_i+0x1ec>
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	6060      	str	r0, [r4, #4]
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	6123      	str	r3, [r4, #16]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c9e:	e7aa      	b.n	8002bf6 <_printf_i+0x14e>
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	6923      	ldr	r3, [r4, #16]
 8002ca8:	47d0      	blx	sl
 8002caa:	3001      	adds	r0, #1
 8002cac:	d0ad      	beq.n	8002c0a <_printf_i+0x162>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	079b      	lsls	r3, r3, #30
 8002cb2:	d413      	bmi.n	8002cdc <_printf_i+0x234>
 8002cb4:	68e0      	ldr	r0, [r4, #12]
 8002cb6:	9b03      	ldr	r3, [sp, #12]
 8002cb8:	4298      	cmp	r0, r3
 8002cba:	bfb8      	it	lt
 8002cbc:	4618      	movlt	r0, r3
 8002cbe:	e7a6      	b.n	8002c0e <_printf_i+0x166>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	47d0      	blx	sl
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d09d      	beq.n	8002c0a <_printf_i+0x162>
 8002cce:	3501      	adds	r5, #1
 8002cd0:	68e3      	ldr	r3, [r4, #12]
 8002cd2:	9903      	ldr	r1, [sp, #12]
 8002cd4:	1a5b      	subs	r3, r3, r1
 8002cd6:	42ab      	cmp	r3, r5
 8002cd8:	dcf2      	bgt.n	8002cc0 <_printf_i+0x218>
 8002cda:	e7eb      	b.n	8002cb4 <_printf_i+0x20c>
 8002cdc:	2500      	movs	r5, #0
 8002cde:	f104 0619 	add.w	r6, r4, #25
 8002ce2:	e7f5      	b.n	8002cd0 <_printf_i+0x228>
 8002ce4:	08003033 	.word	0x08003033
 8002ce8:	08003044 	.word	0x08003044

08002cec <__sflush_r>:
 8002cec:	898a      	ldrh	r2, [r1, #12]
 8002cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	0710      	lsls	r0, r2, #28
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	d457      	bmi.n	8002da8 <__sflush_r+0xbc>
 8002cf8:	684b      	ldr	r3, [r1, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	dc04      	bgt.n	8002d08 <__sflush_r+0x1c>
 8002cfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dc01      	bgt.n	8002d08 <__sflush_r+0x1c>
 8002d04:	2000      	movs	r0, #0
 8002d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d0fa      	beq.n	8002d04 <__sflush_r+0x18>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d14:	682f      	ldr	r7, [r5, #0]
 8002d16:	6a21      	ldr	r1, [r4, #32]
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	d032      	beq.n	8002d82 <__sflush_r+0x96>
 8002d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	075a      	lsls	r2, r3, #29
 8002d22:	d505      	bpl.n	8002d30 <__sflush_r+0x44>
 8002d24:	6863      	ldr	r3, [r4, #4]
 8002d26:	1ac0      	subs	r0, r0, r3
 8002d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d2a:	b10b      	cbz	r3, 8002d30 <__sflush_r+0x44>
 8002d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d2e:	1ac0      	subs	r0, r0, r3
 8002d30:	2300      	movs	r3, #0
 8002d32:	4602      	mov	r2, r0
 8002d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d36:	4628      	mov	r0, r5
 8002d38:	6a21      	ldr	r1, [r4, #32]
 8002d3a:	47b0      	blx	r6
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	d106      	bne.n	8002d50 <__sflush_r+0x64>
 8002d42:	6829      	ldr	r1, [r5, #0]
 8002d44:	291d      	cmp	r1, #29
 8002d46:	d82b      	bhi.n	8002da0 <__sflush_r+0xb4>
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <__sflush_r+0x100>)
 8002d4a:	410a      	asrs	r2, r1
 8002d4c:	07d6      	lsls	r6, r2, #31
 8002d4e:	d427      	bmi.n	8002da0 <__sflush_r+0xb4>
 8002d50:	2200      	movs	r2, #0
 8002d52:	6062      	str	r2, [r4, #4]
 8002d54:	6922      	ldr	r2, [r4, #16]
 8002d56:	04d9      	lsls	r1, r3, #19
 8002d58:	6022      	str	r2, [r4, #0]
 8002d5a:	d504      	bpl.n	8002d66 <__sflush_r+0x7a>
 8002d5c:	1c42      	adds	r2, r0, #1
 8002d5e:	d101      	bne.n	8002d64 <__sflush_r+0x78>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b903      	cbnz	r3, 8002d66 <__sflush_r+0x7a>
 8002d64:	6560      	str	r0, [r4, #84]	; 0x54
 8002d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d68:	602f      	str	r7, [r5, #0]
 8002d6a:	2900      	cmp	r1, #0
 8002d6c:	d0ca      	beq.n	8002d04 <__sflush_r+0x18>
 8002d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d72:	4299      	cmp	r1, r3
 8002d74:	d002      	beq.n	8002d7c <__sflush_r+0x90>
 8002d76:	4628      	mov	r0, r5
 8002d78:	f7ff fbe6 	bl	8002548 <_free_r>
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d80:	e7c1      	b.n	8002d06 <__sflush_r+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4628      	mov	r0, r5
 8002d86:	47b0      	blx	r6
 8002d88:	1c41      	adds	r1, r0, #1
 8002d8a:	d1c8      	bne.n	8002d1e <__sflush_r+0x32>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0c5      	beq.n	8002d1e <__sflush_r+0x32>
 8002d92:	2b1d      	cmp	r3, #29
 8002d94:	d001      	beq.n	8002d9a <__sflush_r+0xae>
 8002d96:	2b16      	cmp	r3, #22
 8002d98:	d101      	bne.n	8002d9e <__sflush_r+0xb2>
 8002d9a:	602f      	str	r7, [r5, #0]
 8002d9c:	e7b2      	b.n	8002d04 <__sflush_r+0x18>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	e7ae      	b.n	8002d06 <__sflush_r+0x1a>
 8002da8:	690f      	ldr	r7, [r1, #16]
 8002daa:	2f00      	cmp	r7, #0
 8002dac:	d0aa      	beq.n	8002d04 <__sflush_r+0x18>
 8002dae:	0793      	lsls	r3, r2, #30
 8002db0:	bf18      	it	ne
 8002db2:	2300      	movne	r3, #0
 8002db4:	680e      	ldr	r6, [r1, #0]
 8002db6:	bf08      	it	eq
 8002db8:	694b      	ldreq	r3, [r1, #20]
 8002dba:	1bf6      	subs	r6, r6, r7
 8002dbc:	600f      	str	r7, [r1, #0]
 8002dbe:	608b      	str	r3, [r1, #8]
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	dd9f      	ble.n	8002d04 <__sflush_r+0x18>
 8002dc4:	4633      	mov	r3, r6
 8002dc6:	463a      	mov	r2, r7
 8002dc8:	4628      	mov	r0, r5
 8002dca:	6a21      	ldr	r1, [r4, #32]
 8002dcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002dd0:	47e0      	blx	ip
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	dc06      	bgt.n	8002de4 <__sflush_r+0xf8>
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	e790      	b.n	8002d06 <__sflush_r+0x1a>
 8002de4:	4407      	add	r7, r0
 8002de6:	1a36      	subs	r6, r6, r0
 8002de8:	e7ea      	b.n	8002dc0 <__sflush_r+0xd4>
 8002dea:	bf00      	nop
 8002dec:	dfbffffe 	.word	0xdfbffffe

08002df0 <_fflush_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	690b      	ldr	r3, [r1, #16]
 8002df4:	4605      	mov	r5, r0
 8002df6:	460c      	mov	r4, r1
 8002df8:	b913      	cbnz	r3, 8002e00 <_fflush_r+0x10>
 8002dfa:	2500      	movs	r5, #0
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	b118      	cbz	r0, 8002e0a <_fflush_r+0x1a>
 8002e02:	6a03      	ldr	r3, [r0, #32]
 8002e04:	b90b      	cbnz	r3, 8002e0a <_fflush_r+0x1a>
 8002e06:	f7ff f8f1 	bl	8001fec <__sinit>
 8002e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f3      	beq.n	8002dfa <_fflush_r+0xa>
 8002e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e14:	07d0      	lsls	r0, r2, #31
 8002e16:	d404      	bmi.n	8002e22 <_fflush_r+0x32>
 8002e18:	0599      	lsls	r1, r3, #22
 8002e1a:	d402      	bmi.n	8002e22 <_fflush_r+0x32>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e1e:	f7ff fb90 	bl	8002542 <__retarget_lock_acquire_recursive>
 8002e22:	4628      	mov	r0, r5
 8002e24:	4621      	mov	r1, r4
 8002e26:	f7ff ff61 	bl	8002cec <__sflush_r>
 8002e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	07da      	lsls	r2, r3, #31
 8002e30:	d4e4      	bmi.n	8002dfc <_fflush_r+0xc>
 8002e32:	89a3      	ldrh	r3, [r4, #12]
 8002e34:	059b      	lsls	r3, r3, #22
 8002e36:	d4e1      	bmi.n	8002dfc <_fflush_r+0xc>
 8002e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e3a:	f7ff fb83 	bl	8002544 <__retarget_lock_release_recursive>
 8002e3e:	e7dd      	b.n	8002dfc <_fflush_r+0xc>

08002e40 <__swhatbuf_r>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	460c      	mov	r4, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	4615      	mov	r5, r2
 8002e4a:	2900      	cmp	r1, #0
 8002e4c:	461e      	mov	r6, r3
 8002e4e:	b096      	sub	sp, #88	; 0x58
 8002e50:	da0c      	bge.n	8002e6c <__swhatbuf_r+0x2c>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	2100      	movs	r1, #0
 8002e56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e5a:	bf0c      	ite	eq
 8002e5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e60:	2340      	movne	r3, #64	; 0x40
 8002e62:	2000      	movs	r0, #0
 8002e64:	6031      	str	r1, [r6, #0]
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	b016      	add	sp, #88	; 0x58
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	466a      	mov	r2, sp
 8002e6e:	f000 f849 	bl	8002f04 <_fstat_r>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	dbed      	blt.n	8002e52 <__swhatbuf_r+0x12>
 8002e76:	9901      	ldr	r1, [sp, #4]
 8002e78:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e7c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e80:	4259      	negs	r1, r3
 8002e82:	4159      	adcs	r1, r3
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	e7eb      	b.n	8002e62 <__swhatbuf_r+0x22>

08002e8a <__smakebuf_r>:
 8002e8a:	898b      	ldrh	r3, [r1, #12]
 8002e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e8e:	079d      	lsls	r5, r3, #30
 8002e90:	4606      	mov	r6, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	d507      	bpl.n	8002ea6 <__smakebuf_r+0x1c>
 8002e96:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	6123      	str	r3, [r4, #16]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6163      	str	r3, [r4, #20]
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	466a      	mov	r2, sp
 8002ea8:	ab01      	add	r3, sp, #4
 8002eaa:	f7ff ffc9 	bl	8002e40 <__swhatbuf_r>
 8002eae:	9900      	ldr	r1, [sp, #0]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	f7ff fbb8 	bl	8002628 <_malloc_r>
 8002eb8:	b948      	cbnz	r0, 8002ece <__smakebuf_r+0x44>
 8002eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ebe:	059a      	lsls	r2, r3, #22
 8002ec0:	d4ef      	bmi.n	8002ea2 <__smakebuf_r+0x18>
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	e7e3      	b.n	8002e96 <__smakebuf_r+0xc>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	6020      	str	r0, [r4, #0]
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	9b00      	ldr	r3, [sp, #0]
 8002eda:	6120      	str	r0, [r4, #16]
 8002edc:	6163      	str	r3, [r4, #20]
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	b15b      	cbz	r3, 8002efa <__smakebuf_r+0x70>
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ee8:	f000 f81e 	bl	8002f28 <_isatty_r>
 8002eec:	b128      	cbz	r0, 8002efa <__smakebuf_r+0x70>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	f023 0303 	bic.w	r3, r3, #3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	431d      	orrs	r5, r3
 8002efe:	81a5      	strh	r5, [r4, #12]
 8002f00:	e7cf      	b.n	8002ea2 <__smakebuf_r+0x18>
	...

08002f04 <_fstat_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	2300      	movs	r3, #0
 8002f08:	4d06      	ldr	r5, [pc, #24]	; (8002f24 <_fstat_r+0x20>)
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	602b      	str	r3, [r5, #0]
 8002f12:	f7fd fbbc 	bl	800068e <_fstat>
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d102      	bne.n	8002f20 <_fstat_r+0x1c>
 8002f1a:	682b      	ldr	r3, [r5, #0]
 8002f1c:	b103      	cbz	r3, 8002f20 <_fstat_r+0x1c>
 8002f1e:	6023      	str	r3, [r4, #0]
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
 8002f22:	bf00      	nop
 8002f24:	2000026c 	.word	0x2000026c

08002f28 <_isatty_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4d05      	ldr	r5, [pc, #20]	; (8002f44 <_isatty_r+0x1c>)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fd fbba 	bl	80006ac <_isatty>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_isatty_r+0x1a>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_isatty_r+0x1a>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	2000026c 	.word	0x2000026c

08002f48 <_sbrk_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4d05      	ldr	r5, [pc, #20]	; (8002f64 <_sbrk_r+0x1c>)
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	f7fd fbc0 	bl	80006d8 <_sbrk>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d102      	bne.n	8002f62 <_sbrk_r+0x1a>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	b103      	cbz	r3, 8002f62 <_sbrk_r+0x1a>
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	2000026c 	.word	0x2000026c

08002f68 <memchr>:
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	4402      	add	r2, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	d101      	bne.n	8002f7a <memchr+0x12>
 8002f76:	2000      	movs	r0, #0
 8002f78:	e003      	b.n	8002f82 <memchr+0x1a>
 8002f7a:	7804      	ldrb	r4, [r0, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	428c      	cmp	r4, r1
 8002f80:	d1f6      	bne.n	8002f70 <memchr+0x8>
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <_init>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr

08002f90 <_fini>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr
